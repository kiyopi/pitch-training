import { c as create_ssr_component, g as add_attribute, e as escape, h as createEventDispatcher, o as onDestroy, v as validate_component, b as validate_store, d as subscribe, f as each } from "../../../../chunks/ssr.js";
import { p as page } from "../../../../chunks/stores.js";
import { P as PageLayout, C as Card } from "../../../../chunks/PageLayout.js";
import { B as Button } from "../../../../chunks/Button.js";
import { PitchDetector } from "pitchy";
import { a as audioManager } from "../../../../chunks/AudioManager.js";
import "tone";
const css$2 = {
  code: ".volume-bar-container.svelte-13z7ppf{position:relative;width:100%}.threshold-indicator.svelte-13z7ppf{opacity:0.6;pointer-events:none}",
  map: `{"version":3,"file":"VolumeBar.svelte","sources":["VolumeBar.svelte"],"sourcesContent":["<script>\\n  import { onMount } from 'svelte';\\n  \\n  export let volume = 0; // 0-100の音量値\\n  export let threshold = 30; // しきい値\\n  export let height = '12px';\\n  export let className = '';\\n  \\n  let barElement;\\n  \\n  // 音量レベルに応じた色の計算（青透過グラデーション）\\n  function getVolumeColor(volume) {\\n    if (volume < threshold) {\\n      // 低音量時: 透過率高い青\\n      const alpha = Math.max(0.2, volume / threshold * 0.8);\\n      return \`rgba(37, 99, 235, \${alpha})\`;\\n    }\\n    // 高音量時: 透過率0（完全な青）\\n    return '#2563eb';\\n  }\\n  \\n  // 音量バーの更新（DOM直接操作）\\n  function updateVolumeBar(newVolume) {\\n    if (barElement) {\\n      const clampedVolume = Math.max(0, Math.min(100, newVolume));\\n      const color = getVolumeColor(clampedVolume);\\n      \\n      // ログ削除\\n      \\n      barElement.style.width = \`\${clampedVolume}%\`;\\n      barElement.style.backgroundColor = color;\\n    }\\n  }\\n  \\n  // volumeプロパティの変更を監視\\n  $: updateVolumeBar(volume);\\n  \\n  onMount(() => {\\n    // 初期スタイル設定（iPhone WebKit対応）\\n    if (barElement) {\\n      barElement.style.width = '0%';\\n      barElement.style.backgroundColor = '#2563eb';\\n      barElement.style.height = height;\\n      barElement.style.borderRadius = '9999px';\\n      barElement.style.transition = 'width 0.2s ease-out, background-color 0.2s ease-out'; // より滑らかなトランジション\\n    }\\n  });\\n<\/script>\\n\\n<div class=\\"volume-bar-container {className}\\">\\n  <div class=\\"volume-bar-bg\\" style=\\"height: {height}; border-radius: 9999px; background-color: #e2e8f0; position: relative; overflow: hidden;\\">\\n    <div \\n      bind:this={barElement}\\n      class=\\"volume-bar-fill\\"\\n      style=\\"position: absolute; top: 0; left: 0; height: 100%;\\"\\n    ></div>\\n  </div>\\n  \\n  <!-- しきい値インジケーター -->\\n  <div \\n    class=\\"threshold-indicator\\" \\n    style=\\"position: absolute; top: 0; left: {threshold}%; width: 2px; height: {height}; background-color: #64748b; border-radius: 1px;\\"\\n  ></div>\\n</div>\\n\\n<style>\\n  .volume-bar-container {\\n    position: relative;\\n    width: 100%;\\n  }\\n  \\n  .threshold-indicator {\\n    opacity: 0.6;\\n    pointer-events: none;\\n  }\\n</style>"],"names":[],"mappings":"AAkEE,oCAAsB,CACpB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IACT,CAEA,mCAAqB,CACnB,OAAO,CAAE,GAAG,CACZ,cAAc,CAAE,IAClB"}`
};
const VolumeBar = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { volume = 0 } = $$props;
  let { threshold = 30 } = $$props;
  let { height = "12px" } = $$props;
  let { className = "" } = $$props;
  let barElement;
  if ($$props.volume === void 0 && $$bindings.volume && volume !== void 0) $$bindings.volume(volume);
  if ($$props.threshold === void 0 && $$bindings.threshold && threshold !== void 0) $$bindings.threshold(threshold);
  if ($$props.height === void 0 && $$bindings.height && height !== void 0) $$bindings.height(height);
  if ($$props.className === void 0 && $$bindings.className && className !== void 0) $$bindings.className(className);
  $$result.css.add(css$2);
  return `<div class="${"volume-bar-container " + escape(className, true) + " svelte-13z7ppf"}"><div class="volume-bar-bg" style="${"height: " + escape(height, true) + "; border-radius: 9999px; background-color: #e2e8f0; position: relative; overflow: hidden;"}"><div class="volume-bar-fill" style="position: absolute; top: 0; left: 0; height: 100%;"${add_attribute("this", barElement, 0)}></div></div>  <div class="threshold-indicator svelte-13z7ppf" style="${"position: absolute; top: 0; left: " + escape(threshold, true) + "%; width: 2px; height: " + escape(height, true) + "; background-color: #64748b; border-radius: 1px;"}"></div> </div>`;
});
const css$1 = {
  code: ".pitch-detector.svelte-vc1bho{padding:1rem}.detection-display.svelte-vc1bho{display:flex;flex-direction:column;gap:1rem}.detection-card.svelte-vc1bho{display:inline-flex;align-items:baseline;gap:0.5rem;padding:1rem 1.5rem;background:hsl(0 0% 100%);border:1px solid hsl(214.3 31.8% 91.4%);border-radius:8px;width:fit-content}.detected-frequency.svelte-vc1bho{font-weight:600;font-size:2rem;color:hsl(222.2 84% 4.9%);font-family:'SF Mono', 'Monaco', 'Cascadia Mono', 'Roboto Mono', \n                 'JetBrains Mono', 'Fira Code', 'Consolas', monospace;min-width:4ch;text-align:right;display:inline-block;font-variant-numeric:tabular-nums;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.hz-suffix.svelte-vc1bho{font-weight:600;font-size:2rem;color:hsl(222.2 84% 4.9%)}.divider.svelte-vc1bho{color:hsl(214.3 31.8% 70%);font-size:1.5rem;margin:0 0.25rem;font-weight:300}.detected-note.svelte-vc1bho{font-weight:600;font-size:2rem;color:hsl(215.4 16.3% 46.9%);font-family:'SF Mono', 'Monaco', 'Cascadia Mono', 'Roboto Mono', \n                 'JetBrains Mono', 'Fira Code', 'Consolas', monospace;min-width:3ch;display:inline-block;text-align:center}.volume-bar{border-radius:4px !important}",
  map: `{"version":3,"file":"PitchDetector.svelte","sources":["PitchDetector.svelte"],"sourcesContent":["<script>\\n  import { onMount, onDestroy, createEventDispatcher } from 'svelte';\\n  import { PitchDetector } from 'pitchy';\\n  import VolumeBar from './VolumeBar.svelte';\\n  import { audioManager } from '$lib/audio/AudioManager.js';\\n\\n  const dispatch = createEventDispatcher();\\n\\n  // Props\\n  export let isActive = false;\\n  export let className = '';\\n  export let debugMode = false; // デバッグモード\\n\\n  // 状態管理（改訂版）\\n  let componentState = 'uninitialized'; // 'uninitialized' | 'initializing' | 'ready' | 'detecting' | 'error'\\n  let lastError = null;\\n  let isInitialized = false;\\n\\n  // 音程検出状態（外部AudioContext対応）\\n  let audioContext = null;        // AudioManagerから取得\\n  let mediaStream = null;         // AudioManagerから取得\\n  let sourceNode = null;          // AudioManagerから取得\\n  let analyser = null;            // AudioManagerから取得\\n  let rawAnalyser = null;         // AudioManagerから取得\\n  let pitchDetector = null;\\n  let animationFrame = null;\\n  let isDetecting = false;\\n\\n  // AudioManager関連\\n  let analyserIds = [];           // 作成したAnalyserのID管理\\n\\n  // 検出データ\\n  let currentVolume = 0;\\n  let rawVolume = 0;\\n  let currentFrequency = 0;\\n  let detectedNote = 'ーー';\\n  let pitchClarity = 0;\\n  \\n  // 安定化用バッファ\\n  let frequencyHistory = [];\\n  let volumeHistory = [];\\n  let stableFrequency = 0;\\n  let stableVolume = 0;\\n  \\n  // 倍音補正用\\n  let previousFrequency = 0;\\n  let harmonicHistory = [];\\n  \\n  // デバッグ用\\n  let debugInterval = null;\\n  \\n  // 表示状態リセット関数（外部から呼び出し可能）\\n  export function resetDisplayState() {\\n    currentVolume = 0;\\n    rawVolume = 0;\\n    currentFrequency = 0;\\n    detectedNote = 'ーー';\\n    pitchClarity = 0;\\n    stableFrequency = 0;\\n    stableVolume = 0;\\n    previousFrequency = 0;\\n    \\n    // バッファクリア\\n    frequencyHistory = [];\\n    volumeHistory = [];\\n    harmonicHistory = [];\\n    \\n    if (debugMode) {\\n      console.log('🔄 [PitchDetector] Display state reset');\\n    }\\n  }\\n  \\n  // マイク状態チェック関数（デバッグ用）\\n  function checkMicrophoneStatus() {\\n    if (!debugMode) return;\\n    \\n    const timestamp = new Date().toLocaleTimeString();\\n    const status = {\\n      timestamp,\\n      componentState,\\n      isActive,\\n      isDetecting,\\n      isInitialized,\\n      mediaStreamActive: mediaStream ? mediaStream.active : null,\\n      mediaStreamTracks: mediaStream ? mediaStream.getTracks().length : 0,\\n      trackStates: mediaStream ? mediaStream.getTracks().map(track => ({\\n        kind: track.kind,\\n        enabled: track.enabled,\\n        readyState: track.readyState,\\n        muted: track.muted\\n      })) : [],\\n      audioContextState: audioContext ? audioContext.state : null,\\n      hasAnalyser: !!analyser,\\n      currentVolume,\\n      currentFrequency\\n    };\\n    \\n    console.log(\`🎤 [PitchDetector] \${timestamp}:\`, status);\\n    \\n    // マイク状態の異常を検知して親に通知\\n    let microphoneHealthy = true;\\n    let errorDetails = [];\\n    \\n    // MediaStreamの状態が異常な場合は警告\\n    if (mediaStream && !mediaStream.active) {\\n      console.warn(\`⚠️ [PitchDetector] MediaStream is inactive!\`, mediaStream);\\n      microphoneHealthy = false;\\n      errorDetails.push('MediaStream inactive');\\n    }\\n    \\n    // AudioContextの状態が異常な場合は警告\\n    if (audioContext && audioContext.state === 'suspended') {\\n      console.warn(\`⚠️ [PitchDetector] AudioContext is suspended!\`, audioContext);\\n      microphoneHealthy = false;\\n      errorDetails.push('AudioContext suspended');\\n    }\\n    \\n    // トラックの状態をチェック\\n    if (mediaStream) {\\n      mediaStream.getTracks().forEach((track, index) => {\\n        if (track.readyState === 'ended') {\\n          console.error(\`❌ [PitchDetector] Track \${index} has ended!\`, track);\\n          microphoneHealthy = false;\\n          errorDetails.push(\`Track \${index} ended\`);\\n        }\\n      });\\n    }\\n    \\n    // マイク状態変化を親に通知\\n    dispatch('microphoneHealthChange', {\\n      healthy: microphoneHealthy,\\n      errors: errorDetails,\\n      details: status\\n    });\\n  }\\n  \\n  // デバッグモードの監視\\n  $: if (debugMode && !debugInterval) {\\n    console.log('🔍 [PitchDetector] Debug mode enabled - starting status monitoring');\\n    debugInterval = setInterval(checkMicrophoneStatus, 3000); // 3秒間隔\\n    checkMicrophoneStatus(); // 即座に1回実行\\n  } else if (!debugMode && debugInterval) {\\n    console.log('🔍 [PitchDetector] Debug mode disabled - stopping status monitoring');\\n    clearInterval(debugInterval);\\n    debugInterval = null;\\n  }\\n\\n  // 初期化（AudioManager対応版）\\n  export async function initialize() {\\n    try {\\n      componentState = 'initializing';\\n      lastError = null;\\n      \\n      console.log('🎙️ [PitchDetector] AudioManager経由で初期化開始');\\n      \\n      // AudioManagerから共有リソースを取得\\n      const resources = await audioManager.initialize();\\n      audioContext = resources.audioContext;\\n      mediaStream = resources.mediaStream;\\n      sourceNode = resources.sourceNode;\\n      \\n      console.log('✅ [PitchDetector] AudioManager リソース取得完了');\\n      \\n      // 専用のAnalyserを作成（フィルター付き）\\n      const filteredAnalyserId = \`pitch-detector-filtered-\${Date.now()}\`;\\n      analyser = audioManager.createAnalyser(filteredAnalyserId, {\\n        fftSize: 2048,\\n        smoothingTimeConstant: 0.8,\\n        minDecibels: -90,\\n        maxDecibels: -10,\\n        useFilters: true\\n      });\\n      analyserIds.push(filteredAnalyserId);\\n      \\n      // 生信号用Analyser（比較用）\\n      const rawAnalyserId = \`pitch-detector-raw-\${Date.now()}\`;\\n      rawAnalyser = audioManager.createAnalyser(rawAnalyserId, {\\n        fftSize: 2048,\\n        smoothingTimeConstant: 0.8,\\n        minDecibels: -90,\\n        maxDecibels: -10,\\n        useFilters: false\\n      });\\n      analyserIds.push(rawAnalyserId);\\n      \\n      console.log('✅ [PitchDetector] Analyser作成完了:', analyserIds);\\n      \\n      // PitchDetector初期化\\n      pitchDetector = PitchDetector.forFloat32Array(analyser.fftSize);\\n      \\n      // 初期化完了\\n      componentState = 'ready';\\n      isInitialized = true;\\n      \\n      // 状態変更を通知\\n      dispatch('stateChange', { state: componentState });\\n      \\n      console.log('✅ [PitchDetector] 初期化完了');\\n      \\n    } catch (error) {\\n      console.error('❌ [PitchDetector] 初期化エラー:', error);\\n      componentState = 'error';\\n      lastError = error;\\n      isInitialized = false;\\n      \\n      // エラーを通知\\n      dispatch('error', { error, context: 'initialization' });\\n      \\n      throw error;\\n    }\\n  }\\n\\n  // 検出開始（改訂版）\\n  export function startDetection() {\\n    if (componentState !== 'ready') {\\n      const error = new Error(\`Cannot start detection: component state is \${componentState}\`);\\n      dispatch('error', { error, context: 'start-detection' });\\n      return false;\\n    }\\n    \\n    if (!analyser || !pitchDetector || !audioContext) {\\n      const error = new Error('Required components not available');\\n      componentState = 'error';\\n      dispatch('error', { error, context: 'start-detection' });\\n      return false;\\n    }\\n    \\n    componentState = 'detecting';\\n    isDetecting = true;\\n    dispatch('stateChange', { state: componentState });\\n    detectPitch();\\n    return true;\\n  }\\n\\n  // 検出停止（改訂版）\\n  export function stopDetection() {\\n    isDetecting = false;\\n    if (animationFrame) {\\n      cancelAnimationFrame(animationFrame);\\n      animationFrame = null;\\n    }\\n    \\n    // 状態を ready に戻す（初期化済みの場合）\\n    if (componentState === 'detecting' && isInitialized) {\\n      componentState = 'ready';\\n      dispatch('stateChange', { state: componentState });\\n    }\\n    \\n  }\\n\\n  // リアルタイム音程検出\\n  function detectPitch() {\\n    if (!isDetecting || !analyser || !rawAnalyser || !pitchDetector) return;\\n    \\n    const bufferLength = analyser.fftSize;\\n    const buffer = new Float32Array(bufferLength);\\n    const rawBuffer = new Float32Array(rawAnalyser.fftSize);\\n    \\n    analyser.getFloatTimeDomainData(buffer);\\n    rawAnalyser.getFloatTimeDomainData(rawBuffer);\\n    \\n    // 音量計算（フィルター後）\\n    let sum = 0;\\n    for (let i = 0; i < bufferLength; i++) {\\n      sum += Math.abs(buffer[i]);\\n    }\\n    const rms = Math.sqrt(sum / bufferLength);\\n    const logVolume = Math.log10(rms + 0.001) * 50 + 100;\\n    const rawCurrentVolume = Math.max(0, Math.min(100, logVolume));\\n    \\n    // 生音量計算（フィルター前）\\n    let rawSum = 0;\\n    for (let i = 0; i < rawBuffer.length; i++) {\\n      rawSum += Math.abs(rawBuffer[i]);\\n    }\\n    const rawRms = Math.sqrt(rawSum / rawBuffer.length);\\n    const rawLogVolume = Math.log10(rawRms + 0.001) * 50 + 100;\\n    rawVolume = Math.max(0, Math.min(100, rawLogVolume));\\n    \\n    // 音量の安定化（5フレーム移動平均）\\n    volumeHistory.push(rawCurrentVolume);\\n    if (volumeHistory.length > 5) {\\n      volumeHistory.shift();\\n    }\\n    stableVolume = volumeHistory.reduce((sum, v) => sum + v, 0) / volumeHistory.length;\\n    currentVolume = stableVolume;\\n    \\n    // 音程検出（PitchDetector使用）\\n    const [pitch, clarity] = pitchDetector.findPitch(buffer, audioContext.sampleRate);\\n    \\n    // 人間音域フィルタリング（実用調整）\\n    // 実際の人間の声域に最適化:\\n    // - 低域: 65Hz以上（C2以上、男性最低音域考慮）  \\n    // - 高域: 1200Hz以下（実用的な歌唱範囲）\\n    // - 極低音域ノイズ（G-1等）は確実に除外\\n    const isValidVocalRange = pitch >= 65 && pitch <= 1200;\\n    \\n    if (pitch && clarity > 0.6 && currentVolume > 10 && isValidVocalRange) {\\n      // 倍音補正システム適用\\n      const correctedFreq = correctHarmonicFrequency(pitch, previousFrequency);\\n      \\n      // 基音安定化システム適用\\n      const stabilizedFreq = stabilizeFrequency(correctedFreq);\\n      \\n      // 周波数表示を更新\\n      currentFrequency = Math.round(stabilizedFreq);\\n      detectedNote = frequencyToNote(currentFrequency);\\n      pitchClarity = clarity;\\n      \\n      // 次回比較用に保存\\n      previousFrequency = currentFrequency;\\n      \\n    } else {\\n      // 信号が弱い場合は倍音履歴をクリア\\n      if (harmonicHistory.length > 0) {\\n        harmonicHistory = [];\\n      }\\n      \\n      // 音程がない場合は前回周波数をリセット\\n      if (currentFrequency === 0) {\\n        previousFrequency = 0;\\n      }\\n      \\n      // 周波数表示をクリア\\n      currentFrequency = 0;\\n      detectedNote = 'ーー';\\n      pitchClarity = 0;\\n    }\\n    \\n    // 音程が検出されない場合はVolumeBarも0に（極低音域ノイズ対策）\\n    const displayVolume = currentFrequency > 0 ? rawVolume : 0;\\n    \\n    \\n    // 親コンポーネントにデータを送信\\n    \\n    dispatch('pitchUpdate', {\\n      frequency: currentFrequency,\\n      note: detectedNote,\\n      volume: currentVolume,\\n      rawVolume: displayVolume,\\n      clarity: pitchClarity\\n    });\\n    \\n    animationFrame = requestAnimationFrame(detectPitch);\\n  }\\n\\n  // 音楽的妥当性評価\\n  function calculateMusicalScore(frequency) {\\n    const C4 = 261.63; // Middle C\\n    \\n    // 最も近い半音階音名への距離を計算\\n    const semitonesFromC4 = Math.log2(frequency / C4) * 12;\\n    const nearestSemitone = Math.round(semitonesFromC4);\\n    const distanceFromSemitone = Math.abs(semitonesFromC4 - nearestSemitone);\\n    \\n    // 半音階に近いほど高スコア（±50セント以内で最高点）\\n    return Math.max(0, 1.0 - (distanceFromSemitone / 0.5));\\n  }\\n\\n  // 倍音補正システム\\n  function correctHarmonicFrequency(detectedFreq, previousFreq) {\\n    // 基音候補生成（オクターブ違いを考慮）\\n    const fundamentalCandidates = [\\n      detectedFreq,          // そのまま（基音の可能性）\\n      detectedFreq / 2.0,    // 1オクターブ下（2倍音 → 基音）\\n      detectedFreq / 3.0,    // 3倍音 → 基音\\n      detectedFreq / 4.0,    // 4倍音 → 基音\\n      detectedFreq * 2.0,    // 1オクターブ上（低く歌った場合）\\n    ];\\n    \\n    // 人間音域範囲（C3-C6）\\n    const vocalRangeMin = 130.81;\\n    const vocalRangeMax = 1046.50;\\n    \\n    // 各候補の妥当性評価\\n    const evaluateFundamental = (freq) => {\\n      // 人間音域範囲内チェック（40%重み）\\n      const inVocalRange = freq >= vocalRangeMin && freq <= vocalRangeMax;\\n      const vocalRangeScore = inVocalRange ? 1.0 : 0.0;\\n      \\n      // 前回検出との連続性評価（40%重み）\\n      const continuityScore = previousFreq > 0\\n        ? 1.0 - Math.min(Math.abs(freq - previousFreq) / previousFreq, 1.0)\\n        : 0.5;\\n      \\n      // 音楽的妥当性評価（20%重み）\\n      const musicalScore = calculateMusicalScore(freq);\\n      \\n      const totalScore = (vocalRangeScore * 0.4) + (continuityScore * 0.4) + (musicalScore * 0.2);\\n      return { freq, score: totalScore };\\n    };\\n    \\n    // 最高スコア候補を基音として採用\\n    const evaluatedCandidates = fundamentalCandidates.map(evaluateFundamental);\\n    const bestCandidate = evaluatedCandidates.reduce((best, current) => \\n      current.score > best.score ? current : best\\n    );\\n    \\n    return bestCandidate.freq;\\n  }\\n\\n  // 基音安定化システム\\n  function stabilizeFrequency(currentFreq, stabilityThreshold = 0.1) {\\n    // 履歴バッファに追加（最大5フレーム保持）\\n    harmonicHistory.push(currentFreq);\\n    if (harmonicHistory.length > 5) harmonicHistory.shift();\\n    \\n    // 中央値ベースの安定化（外れ値除去）\\n    const sorted = [...harmonicHistory].sort((a, b) => a - b);\\n    const median = sorted[Math.floor(sorted.length / 2)];\\n    \\n    // 急激な変化を抑制（段階的変化）\\n    const maxChange = median * stabilityThreshold;\\n    const stabilized = Math.abs(currentFreq - median) > maxChange \\n      ? median + Math.sign(currentFreq - median) * maxChange\\n      : currentFreq;\\n      \\n    return stabilized;\\n  }\\n\\n  // 周波数から音程名に変換\\n  function frequencyToNote(frequency) {\\n    const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\\n    const A4 = 440;\\n    \\n    if (frequency <= 0) return 'ーー';\\n    \\n    const semitonesFromA4 = Math.round(12 * Math.log2(frequency / A4));\\n    const noteIndex = (semitonesFromA4 + 9 + 120) % 12;\\n    const octave = Math.floor((semitonesFromA4 + 9) / 12) + 4;\\n    \\n    return noteNames[noteIndex] + octave;\\n  }\\n\\n  // 状態確認API（新規追加）\\n  export function getIsInitialized() {\\n    return isInitialized && componentState === 'ready';\\n  }\\n  \\n  export function getState() {\\n    return {\\n      componentState,\\n      isInitialized,\\n      isDetecting,\\n      lastError,\\n      hasRequiredComponents: !!(analyser && pitchDetector && audioContext && mediaStream)\\n    };\\n  }\\n  \\n  // 再初期化API（AudioManager対応版）\\n  export async function reinitialize() {\\n    console.log('🔄 [PitchDetector] 再初期化開始');\\n    \\n    // 現在の状態をクリーンアップ\\n    cleanup();\\n    \\n    // 短い待機でリソース解放を確実に\\n    await new Promise(resolve => setTimeout(resolve, 100));\\n    \\n    // 再初期化実行\\n    await initialize();\\n    \\n    console.log('✅ [PitchDetector] 再初期化完了');\\n  }\\n\\n  // クリーンアップ（AudioManager対応版）\\n  export function cleanup() {\\n    console.log('🧹 [PitchDetector] クリーンアップ開始');\\n    \\n    stopDetection();\\n    \\n    // AudioManagerに作成したAnalyserを解放通知\\n    if (analyserIds.length > 0) {\\n      audioManager.release(analyserIds);\\n      console.log('📤 [PitchDetector] AudioManagerにAnalyser解放通知:', analyserIds);\\n      analyserIds = [];\\n    }\\n    \\n    // 状態をリセット\\n    componentState = 'uninitialized';\\n    isInitialized = false;\\n    lastError = null;\\n    \\n    // 参照をクリア（実際のリソースはAudioManagerが管理）\\n    audioContext = null;\\n    mediaStream = null;\\n    sourceNode = null;\\n    analyser = null;\\n    rawAnalyser = null;\\n    pitchDetector = null;\\n    \\n    // 履歴クリア\\n    frequencyHistory = [];\\n    volumeHistory = [];\\n    harmonicHistory = [];\\n    \\n    console.log('✅ [PitchDetector] クリーンアップ完了');\\n  }\\n\\n  // isActiveの変更を監視（改善版）\\n  $: if (isActive && componentState === 'ready' && analyser && !isDetecting) {\\n    startDetection();\\n  } else if (!isActive && isDetecting) {\\n    stopDetection();\\n  }\\n\\n  onDestroy(() => {\\n    // デバッグインターバルのクリア\\n    if (debugInterval) {\\n      clearInterval(debugInterval);\\n      debugInterval = null;\\n    }\\n    \\n    // AudioManager使用時は自動クリーンアップしない\\n    // （他のコンポーネントが使用中の可能性があるため）\\n    // 明示的なcleanup()呼び出しが必要\\n    console.log('🔄 [PitchDetector] onDestroy - AudioManagerリソースは保持');\\n  });\\n<\/script>\\n\\n<div class=\\"pitch-detector {className}\\">\\n  <div class=\\"detection-display\\">\\n    <div class=\\"detection-card\\">\\n      <span class=\\"detected-frequency\\">{currentFrequency > 0 ? Math.round(currentFrequency) : '---'}</span>\\n      <span class=\\"hz-suffix\\">Hz</span>\\n      <span class=\\"divider\\">|</span>\\n      <span class=\\"detected-note\\">{detectedNote}</span>\\n    </div>\\n    \\n    <VolumeBar volume={currentFrequency > 0 ? rawVolume : 0} className=\\"volume-bar\\" />\\n  </div>\\n</div>\\n\\n<style>\\n  .pitch-detector {\\n    padding: 1rem;\\n  }\\n\\n  .detection-display {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 1rem;\\n  }\\n  \\n  .detection-card {\\n    display: inline-flex;\\n    align-items: baseline;\\n    gap: 0.5rem;\\n    padding: 1rem 1.5rem;\\n    background: hsl(0 0% 100%);\\n    border: 1px solid hsl(214.3 31.8% 91.4%);\\n    border-radius: 8px;\\n    width: fit-content;\\n  }\\n\\n  .detected-frequency {\\n    font-weight: 600;\\n    font-size: 2rem;\\n    color: hsl(222.2 84% 4.9%);\\n    font-family: 'SF Mono', 'Monaco', 'Cascadia Mono', 'Roboto Mono', \\n                 'JetBrains Mono', 'Fira Code', 'Consolas', monospace;\\n    min-width: 4ch;\\n    text-align: right;\\n    display: inline-block;\\n    font-variant-numeric: tabular-nums;\\n    -webkit-font-smoothing: antialiased;\\n    -moz-osx-font-smoothing: grayscale;\\n  }\\n\\n  .hz-suffix {\\n    font-weight: 600;\\n    font-size: 2rem;\\n    color: hsl(222.2 84% 4.9%);\\n  }\\n\\n  .divider {\\n    color: hsl(214.3 31.8% 70%);\\n    font-size: 1.5rem;\\n    margin: 0 0.25rem;\\n    font-weight: 300;\\n  }\\n  \\n  .detected-note {\\n    font-weight: 600;\\n    font-size: 2rem;\\n    color: hsl(215.4 16.3% 46.9%);\\n    font-family: 'SF Mono', 'Monaco', 'Cascadia Mono', 'Roboto Mono', \\n                 'JetBrains Mono', 'Fira Code', 'Consolas', monospace;\\n    min-width: 3ch;\\n    display: inline-block;\\n    text-align: center;\\n  }\\n\\n  :global(.volume-bar) {\\n    border-radius: 4px !important;\\n  }\\n</style>"],"names":[],"mappings":"AAshBE,6BAAgB,CACd,OAAO,CAAE,IACX,CAEA,gCAAmB,CACjB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,GAAG,CAAE,IACP,CAEA,6BAAgB,CACd,OAAO,CAAE,WAAW,CACpB,WAAW,CAAE,QAAQ,CACrB,GAAG,CAAE,MAAM,CACX,OAAO,CAAE,IAAI,CAAC,MAAM,CACpB,UAAU,CAAE,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAC1B,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CACxC,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,WACT,CAEA,iCAAoB,CAClB,WAAW,CAAE,GAAG,CAChB,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAC1B,WAAW,CAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC,aAAa,CAAC;AACrE,iBAAiB,gBAAgB,CAAC,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,CAAC,SAAS,CACjE,SAAS,CAAE,GAAG,CACd,UAAU,CAAE,KAAK,CACjB,OAAO,CAAE,YAAY,CACrB,oBAAoB,CAAE,YAAY,CAClC,sBAAsB,CAAE,WAAW,CACnC,uBAAuB,CAAE,SAC3B,CAEA,wBAAW,CACT,WAAW,CAAE,GAAG,CAChB,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,KAAK,CAAC,GAAG,CAAC,IAAI,CAC3B,CAEA,sBAAS,CACP,KAAK,CAAE,IAAI,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAC3B,SAAS,CAAE,MAAM,CACjB,MAAM,CAAE,CAAC,CAAC,OAAO,CACjB,WAAW,CAAE,GACf,CAEA,4BAAe,CACb,WAAW,CAAE,GAAG,CAChB,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAC7B,WAAW,CAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC,aAAa,CAAC;AACrE,iBAAiB,gBAAgB,CAAC,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,CAAC,SAAS,CACjE,SAAS,CAAE,GAAG,CACd,OAAO,CAAE,YAAY,CACrB,UAAU,CAAE,MACd,CAEQ,WAAa,CACnB,aAAa,CAAE,GAAG,CAAC,UACrB"}`
};
function calculateMusicalScore(frequency) {
  const C4 = 261.63;
  const semitonesFromC4 = Math.log2(frequency / C4) * 12;
  const nearestSemitone = Math.round(semitonesFromC4);
  const distanceFromSemitone = Math.abs(semitonesFromC4 - nearestSemitone);
  return Math.max(0, 1 - distanceFromSemitone / 0.5);
}
function correctHarmonicFrequency(detectedFreq, previousFreq) {
  const fundamentalCandidates = [
    detectedFreq,
    detectedFreq / 2,
    detectedFreq / 3,
    detectedFreq / 4,
    detectedFreq * 2
  ];
  const vocalRangeMin = 130.81;
  const vocalRangeMax = 1046.5;
  const evaluateFundamental = (freq) => {
    const inVocalRange = freq >= vocalRangeMin && freq <= vocalRangeMax;
    const vocalRangeScore = inVocalRange ? 1 : 0;
    const continuityScore = previousFreq > 0 ? 1 - Math.min(Math.abs(freq - previousFreq) / previousFreq, 1) : 0.5;
    const musicalScore = calculateMusicalScore(freq);
    const totalScore = vocalRangeScore * 0.4 + continuityScore * 0.4 + musicalScore * 0.2;
    return { freq, score: totalScore };
  };
  const evaluatedCandidates = fundamentalCandidates.map(evaluateFundamental);
  const bestCandidate = evaluatedCandidates.reduce((best, current) => current.score > best.score ? current : best);
  return bestCandidate.freq;
}
function frequencyToNote(frequency) {
  const noteNames = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];
  const A4 = 440;
  if (frequency <= 0) return "ーー";
  const semitonesFromA4 = Math.round(12 * Math.log2(frequency / A4));
  const noteIndex = (semitonesFromA4 + 9 + 120) % 12;
  const octave = Math.floor((semitonesFromA4 + 9) / 12) + 4;
  return noteNames[noteIndex] + octave;
}
const PitchDetector_1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  const dispatch = createEventDispatcher();
  let { isActive = false } = $$props;
  let { className = "" } = $$props;
  let { debugMode = false } = $$props;
  let componentState = "uninitialized";
  let lastError = null;
  let isInitialized = false;
  let audioContext = null;
  let mediaStream = null;
  let sourceNode = null;
  let analyser = null;
  let rawAnalyser = null;
  let pitchDetector = null;
  let animationFrame = null;
  let isDetecting = false;
  let analyserIds = [];
  let currentVolume = 0;
  let rawVolume = 0;
  let currentFrequency = 0;
  let detectedNote = "ーー";
  let pitchClarity = 0;
  let volumeHistory = [];
  let stableVolume = 0;
  let previousFrequency = 0;
  let harmonicHistory = [];
  let debugInterval = null;
  function resetDisplayState() {
    currentVolume = 0;
    rawVolume = 0;
    currentFrequency = 0;
    detectedNote = "ーー";
    pitchClarity = 0;
    stableVolume = 0;
    previousFrequency = 0;
    volumeHistory = [];
    harmonicHistory = [];
    if (debugMode) {
      console.log("🔄 [PitchDetector] Display state reset");
    }
  }
  function checkMicrophoneStatus() {
    if (!debugMode) return;
    const timestamp = (/* @__PURE__ */ new Date()).toLocaleTimeString();
    const status = {
      timestamp,
      componentState,
      isActive,
      isDetecting,
      isInitialized,
      mediaStreamActive: mediaStream ? mediaStream.active : null,
      mediaStreamTracks: mediaStream ? mediaStream.getTracks().length : 0,
      trackStates: mediaStream ? mediaStream.getTracks().map((track) => ({
        kind: track.kind,
        enabled: track.enabled,
        readyState: track.readyState,
        muted: track.muted
      })) : [],
      audioContextState: audioContext ? audioContext.state : null,
      hasAnalyser: !!analyser,
      currentVolume,
      currentFrequency
    };
    console.log(`🎤 [PitchDetector] ${timestamp}:`, status);
    let microphoneHealthy = true;
    let errorDetails = [];
    if (mediaStream && !mediaStream.active) {
      console.warn(`⚠️ [PitchDetector] MediaStream is inactive!`, mediaStream);
      microphoneHealthy = false;
      errorDetails.push("MediaStream inactive");
    }
    if (audioContext && audioContext.state === "suspended") {
      console.warn(`⚠️ [PitchDetector] AudioContext is suspended!`, audioContext);
      microphoneHealthy = false;
      errorDetails.push("AudioContext suspended");
    }
    if (mediaStream) {
      mediaStream.getTracks().forEach((track, index) => {
        if (track.readyState === "ended") {
          console.error(`❌ [PitchDetector] Track ${index} has ended!`, track);
          microphoneHealthy = false;
          errorDetails.push(`Track ${index} ended`);
        }
      });
    }
    dispatch("microphoneHealthChange", {
      healthy: microphoneHealthy,
      errors: errorDetails,
      details: status
    });
  }
  async function initialize() {
    try {
      componentState = "initializing";
      lastError = null;
      console.log("🎙️ [PitchDetector] AudioManager経由で初期化開始");
      const resources = await audioManager.initialize();
      audioContext = resources.audioContext;
      mediaStream = resources.mediaStream;
      sourceNode = resources.sourceNode;
      console.log("✅ [PitchDetector] AudioManager リソース取得完了");
      const filteredAnalyserId = `pitch-detector-filtered-${Date.now()}`;
      analyser = audioManager.createAnalyser(filteredAnalyserId, {
        fftSize: 2048,
        smoothingTimeConstant: 0.8,
        minDecibels: -90,
        maxDecibels: -10,
        useFilters: true
      });
      analyserIds.push(filteredAnalyserId);
      const rawAnalyserId = `pitch-detector-raw-${Date.now()}`;
      rawAnalyser = audioManager.createAnalyser(rawAnalyserId, {
        fftSize: 2048,
        smoothingTimeConstant: 0.8,
        minDecibels: -90,
        maxDecibels: -10,
        useFilters: false
      });
      analyserIds.push(rawAnalyserId);
      console.log("✅ [PitchDetector] Analyser作成完了:", analyserIds);
      pitchDetector = PitchDetector.forFloat32Array(analyser.fftSize);
      componentState = "ready";
      isInitialized = true;
      dispatch("stateChange", { state: componentState });
      console.log("✅ [PitchDetector] 初期化完了");
    } catch (error) {
      console.error("❌ [PitchDetector] 初期化エラー:", error);
      componentState = "error";
      lastError = error;
      isInitialized = false;
      dispatch("error", { error, context: "initialization" });
      throw error;
    }
  }
  function startDetection() {
    if (componentState !== "ready") {
      const error = new Error(`Cannot start detection: component state is ${componentState}`);
      dispatch("error", { error, context: "start-detection" });
      return false;
    }
    if (!analyser || !pitchDetector || !audioContext) {
      const error = new Error("Required components not available");
      componentState = "error";
      dispatch("error", { error, context: "start-detection" });
      return false;
    }
    componentState = "detecting";
    isDetecting = true;
    dispatch("stateChange", { state: componentState });
    detectPitch();
    return true;
  }
  function stopDetection() {
    isDetecting = false;
    if (animationFrame) {
      cancelAnimationFrame(animationFrame);
      animationFrame = null;
    }
    if (componentState === "detecting" && isInitialized) {
      componentState = "ready";
      dispatch("stateChange", { state: componentState });
    }
  }
  function detectPitch() {
    if (!isDetecting || !analyser || !rawAnalyser || !pitchDetector) return;
    const bufferLength = analyser.fftSize;
    const buffer = new Float32Array(bufferLength);
    const rawBuffer = new Float32Array(rawAnalyser.fftSize);
    analyser.getFloatTimeDomainData(buffer);
    rawAnalyser.getFloatTimeDomainData(rawBuffer);
    let sum = 0;
    for (let i = 0; i < bufferLength; i++) {
      sum += Math.abs(buffer[i]);
    }
    const rms = Math.sqrt(sum / bufferLength);
    const logVolume = Math.log10(rms + 1e-3) * 50 + 100;
    const rawCurrentVolume = Math.max(0, Math.min(100, logVolume));
    let rawSum = 0;
    for (let i = 0; i < rawBuffer.length; i++) {
      rawSum += Math.abs(rawBuffer[i]);
    }
    const rawRms = Math.sqrt(rawSum / rawBuffer.length);
    const rawLogVolume = Math.log10(rawRms + 1e-3) * 50 + 100;
    rawVolume = Math.max(0, Math.min(100, rawLogVolume));
    volumeHistory.push(rawCurrentVolume);
    if (volumeHistory.length > 5) {
      volumeHistory.shift();
    }
    stableVolume = volumeHistory.reduce((sum2, v) => sum2 + v, 0) / volumeHistory.length;
    currentVolume = stableVolume;
    const [pitch, clarity] = pitchDetector.findPitch(buffer, audioContext.sampleRate);
    const isValidVocalRange = pitch >= 65 && pitch <= 1200;
    if (pitch && clarity > 0.6 && currentVolume > 10 && isValidVocalRange) {
      const correctedFreq = correctHarmonicFrequency(pitch, previousFrequency);
      const stabilizedFreq = stabilizeFrequency(correctedFreq);
      currentFrequency = Math.round(stabilizedFreq);
      detectedNote = frequencyToNote(currentFrequency);
      pitchClarity = clarity;
      previousFrequency = currentFrequency;
    } else {
      if (harmonicHistory.length > 0) {
        harmonicHistory = [];
      }
      if (currentFrequency === 0) {
        previousFrequency = 0;
      }
      currentFrequency = 0;
      detectedNote = "ーー";
      pitchClarity = 0;
    }
    const displayVolume = currentFrequency > 0 ? rawVolume : 0;
    dispatch("pitchUpdate", {
      frequency: currentFrequency,
      note: detectedNote,
      volume: currentVolume,
      rawVolume: displayVolume,
      clarity: pitchClarity
    });
    animationFrame = requestAnimationFrame(detectPitch);
  }
  function stabilizeFrequency(currentFreq, stabilityThreshold = 0.1) {
    harmonicHistory.push(currentFreq);
    if (harmonicHistory.length > 5) harmonicHistory.shift();
    const sorted = [...harmonicHistory].sort((a, b) => a - b);
    const median = sorted[Math.floor(sorted.length / 2)];
    const maxChange = median * stabilityThreshold;
    const stabilized = Math.abs(currentFreq - median) > maxChange ? median + Math.sign(currentFreq - median) * maxChange : currentFreq;
    return stabilized;
  }
  function getIsInitialized() {
    return isInitialized && componentState === "ready";
  }
  function getState() {
    return {
      componentState,
      isInitialized,
      isDetecting,
      lastError,
      hasRequiredComponents: !!(analyser && pitchDetector && audioContext && mediaStream)
    };
  }
  async function reinitialize() {
    console.log("🔄 [PitchDetector] 再初期化開始");
    cleanup();
    await new Promise((resolve) => setTimeout(resolve, 100));
    await initialize();
    console.log("✅ [PitchDetector] 再初期化完了");
  }
  function cleanup() {
    console.log("🧹 [PitchDetector] クリーンアップ開始");
    stopDetection();
    if (analyserIds.length > 0) {
      audioManager.release(analyserIds);
      console.log("📤 [PitchDetector] AudioManagerにAnalyser解放通知:", analyserIds);
      analyserIds = [];
    }
    componentState = "uninitialized";
    isInitialized = false;
    lastError = null;
    audioContext = null;
    mediaStream = null;
    sourceNode = null;
    analyser = null;
    rawAnalyser = null;
    pitchDetector = null;
    volumeHistory = [];
    harmonicHistory = [];
    console.log("✅ [PitchDetector] クリーンアップ完了");
  }
  onDestroy(() => {
    if (debugInterval) {
      clearInterval(debugInterval);
      debugInterval = null;
    }
    console.log("🔄 [PitchDetector] onDestroy - AudioManagerリソースは保持");
  });
  if ($$props.isActive === void 0 && $$bindings.isActive && isActive !== void 0) $$bindings.isActive(isActive);
  if ($$props.className === void 0 && $$bindings.className && className !== void 0) $$bindings.className(className);
  if ($$props.debugMode === void 0 && $$bindings.debugMode && debugMode !== void 0) $$bindings.debugMode(debugMode);
  if ($$props.resetDisplayState === void 0 && $$bindings.resetDisplayState && resetDisplayState !== void 0) $$bindings.resetDisplayState(resetDisplayState);
  if ($$props.initialize === void 0 && $$bindings.initialize && initialize !== void 0) $$bindings.initialize(initialize);
  if ($$props.startDetection === void 0 && $$bindings.startDetection && startDetection !== void 0) $$bindings.startDetection(startDetection);
  if ($$props.stopDetection === void 0 && $$bindings.stopDetection && stopDetection !== void 0) $$bindings.stopDetection(stopDetection);
  if ($$props.getIsInitialized === void 0 && $$bindings.getIsInitialized && getIsInitialized !== void 0) $$bindings.getIsInitialized(getIsInitialized);
  if ($$props.getState === void 0 && $$bindings.getState && getState !== void 0) $$bindings.getState(getState);
  if ($$props.reinitialize === void 0 && $$bindings.reinitialize && reinitialize !== void 0) $$bindings.reinitialize(reinitialize);
  if ($$props.cleanup === void 0 && $$bindings.cleanup && cleanup !== void 0) $$bindings.cleanup(cleanup);
  $$result.css.add(css$1);
  {
    if (debugMode && !debugInterval) {
      console.log("🔍 [PitchDetector] Debug mode enabled - starting status monitoring");
      debugInterval = setInterval(checkMicrophoneStatus, 3e3);
      checkMicrophoneStatus();
    } else if (!debugMode && debugInterval) {
      console.log("🔍 [PitchDetector] Debug mode disabled - stopping status monitoring");
      clearInterval(debugInterval);
      debugInterval = null;
    }
  }
  {
    if (isActive && componentState === "ready" && analyser && !isDetecting) {
      startDetection();
    } else if (!isActive && isDetecting) {
      stopDetection();
    }
  }
  return `<div class="${"pitch-detector " + escape(className, true) + " svelte-vc1bho"}"><div class="detection-display svelte-vc1bho"><div class="detection-card svelte-vc1bho"><span class="detected-frequency svelte-vc1bho">${escape(currentFrequency > 0 ? Math.round(currentFrequency) : "---")}</span> <span class="hz-suffix svelte-vc1bho" data-svelte-h="svelte-5uyilv">Hz</span> <span class="divider svelte-vc1bho" data-svelte-h="svelte-1dytxz4">|</span> <span class="detected-note svelte-vc1bho">${escape(detectedNote)}</span></div> ${validate_component(VolumeBar, "VolumeBar").$$render(
    $$result,
    {
      volume: currentFrequency > 0 ? rawVolume : 0,
      className: "volume-bar"
    },
    {},
    {}
  )}</div> </div>`;
});
const css = {
  code: ".header-section.svelte-ds9yw.svelte-ds9yw{text-align:center;margin-bottom:2rem}.page-title.svelte-ds9yw.svelte-ds9yw{font-size:2rem;font-weight:700;color:hsl(222.2 84% 4.9%);margin-bottom:0.5rem}.page-description.svelte-ds9yw.svelte-ds9yw{color:hsl(215.4 16.3% 46.9%);font-size:1rem;margin:0}.main-card{border:1px solid hsl(214.3 31.8% 91.4%) !important;background:hsl(0 0% 100%) !important;border-radius:8px !important;box-shadow:0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px 0 rgb(0 0 0 / 0.06) !important;margin-bottom:1.5rem}.status-card{border-radius:8px !important;margin-bottom:1.5rem}.error-card{border:1px solid hsl(0 84.2% 60.2%) !important;background:hsl(0 84.2% 97%) !important;border-radius:8px !important;box-shadow:0 1px 3px 0 rgb(0 0 0 / 0.1) !important}.results-card{border:1px solid hsl(142.1 76.2% 36.3%) !important;background:linear-gradient(135deg, hsl(142.1 76.2% 95%) 0%, hsl(0 0% 100%) 100%) !important}.card-header.svelte-ds9yw.svelte-ds9yw{padding-bottom:1rem;border-bottom:1px solid hsl(214.3 31.8% 91.4%);margin-bottom:1.5rem}.section-title.svelte-ds9yw.svelte-ds9yw{font-size:1.125rem;font-weight:600;color:hsl(222.2 84% 4.9%);margin:0}.card-content.svelte-ds9yw.svelte-ds9yw{display:flex;flex-direction:column;gap:1rem}.status-content.svelte-ds9yw.svelte-ds9yw{display:flex;justify-content:space-between;align-items:center;gap:1rem}.status-message.svelte-ds9yw.svelte-ds9yw{font-weight:500;color:hsl(222.2 84% 4.9%)}.progress-indicator.svelte-ds9yw.svelte-ds9yw{font-size:0.875rem;color:hsl(215.4 16.3% 46.9%)}.side-by-side-container.svelte-ds9yw.svelte-ds9yw{display:flex;gap:1.5rem;margin-bottom:1.5rem}.half-width{flex:1}@media(max-width: 768px){.side-by-side-container.svelte-ds9yw.svelte-ds9yw{flex-direction:column}.half-width{width:100%}}.debug-info.svelte-ds9yw.svelte-ds9yw{position:absolute;top:1rem;right:1rem;background:hsl(220 13% 91%);color:hsl(220 13% 46%);padding:0.25rem 0.5rem;border-radius:4px;font-size:0.75rem;font-family:'SF Mono', 'Monaco', 'Cascadia Mono', 'Roboto Mono', monospace;z-index:100}.base-note-info.svelte-ds9yw.svelte-ds9yw{text-align:center;padding:1rem;background:hsl(210 40% 98%);border-radius:6px;border:1px solid hsl(214.3 31.8% 91.4%);font-size:0.875rem;color:hsl(215.4 16.3% 46.9%)}.relative-pitch-info.svelte-ds9yw.svelte-ds9yw{text-align:center;padding:1rem;background:hsl(210 40% 98%);border-radius:6px;border:1px solid hsl(214.3 31.8% 91.4%);margin-top:1rem}.frequency-display-large.svelte-ds9yw.svelte-ds9yw{display:flex;flex-direction:column;align-items:center;gap:0.25rem}.large-hz.svelte-ds9yw.svelte-ds9yw{font-size:2rem;font-weight:700;color:hsl(222.2 84% 4.9%);line-height:1}.note-with-cents.svelte-ds9yw.svelte-ds9yw{font-size:0.875rem;color:hsl(215.4 16.3% 46.9%);font-weight:500}.no-signal.svelte-ds9yw.svelte-ds9yw{font-size:2rem;font-weight:700;color:hsl(215.4 16.3% 46.9%);line-height:1}.pitch-detector-placeholder.svelte-ds9yw.svelte-ds9yw{text-align:center;padding:2rem;color:hsl(215.4 16.3% 46.9%);font-style:italic}.scale-guide.svelte-ds9yw.svelte-ds9yw{display:grid;grid-template-columns:repeat(4, 1fr);gap:0.75rem;margin-bottom:1rem}.scale-item.svelte-ds9yw.svelte-ds9yw{display:flex;align-items:center;justify-content:center;height:3rem;border-radius:6px;font-weight:500;font-size:0.875rem;border:1px solid hsl(215.4 16.3% 46.9%);background:hsl(0 0% 100%);color:hsl(215.4 16.3% 46.9%);transition:all 0.3s ease}.scale-item.active.svelte-ds9yw.svelte-ds9yw{background:hsl(343.8 79.7% 53.7%) !important;color:white !important;border:2px solid hsla(343.8 79.7% 53.7% / 0.5) !important;transform:scale(1.2);font-size:1.125rem;font-weight:700;animation:svelte-ds9yw-pulse 2s infinite;box-shadow:0 0 0 2px hsla(343.8 79.7% 53.7% / 0.3) !important}.scale-item.correct.svelte-ds9yw.svelte-ds9yw{background:hsl(142.1 76.2% 36.3%);color:hsl(210 40% 98%);border-color:hsl(142.1 76.2% 36.3%);animation:svelte-ds9yw-correctFlash 0.5s ease-out}.scale-item.incorrect.svelte-ds9yw.svelte-ds9yw{background:hsl(0 84.2% 60.2%);color:hsl(210 40% 98%);border-color:hsl(0 84.2% 60.2%);animation:svelte-ds9yw-shake 0.5s ease-in-out}@keyframes svelte-ds9yw-pulse{0%,100%{opacity:1}50%{opacity:0.7}}@keyframes svelte-ds9yw-correctFlash{0%{transform:scale(1);background:hsl(47.9 95.8% 53.1%)}50%{transform:scale(1.1);background:hsl(142.1 76.2% 36.3%)}100%{transform:scale(1);background:hsl(142.1 76.2% 36.3%)}}@keyframes svelte-ds9yw-shake{0%,100%{transform:translateX(0)}25%{transform:translateX(-5px)}75%{transform:translateX(5px)}}.guide-instruction.svelte-ds9yw.svelte-ds9yw{text-align:center;font-size:0.875rem;color:hsl(215.4 16.3% 46.9%);padding:0.75rem;background:hsl(210 40% 98%);border-radius:6px}.guide-feedback.svelte-ds9yw.svelte-ds9yw{display:flex;align-items:center;justify-content:center;gap:0.5rem;margin-top:0.5rem;font-size:0.75rem}.feedback-label.svelte-ds9yw.svelte-ds9yw{color:hsl(215.4 16.3% 46.9%);font-weight:500}.feedback-value.svelte-ds9yw.svelte-ds9yw{font-weight:700;font-family:'SF Mono', 'Monaco', 'Cascadia Mono', 'Roboto Mono', monospace;padding:0.125rem 0.375rem;border-radius:4px;background:hsl(214.3 31.8% 91.4%);color:hsl(222.2 84% 4.9%);min-width:4ch;text-align:center}.feedback-value.accurate.svelte-ds9yw.svelte-ds9yw{background:hsl(142.1 76.2% 90%);color:hsl(142.1 76.2% 30%)}.feedback-value.close.svelte-ds9yw.svelte-ds9yw{background:hsl(47.9 95.8% 90%);color:hsl(47.9 95.8% 30%)}.feedback-status.svelte-ds9yw.svelte-ds9yw{font-weight:500;font-size:0.75rem}.feedback-status.success.svelte-ds9yw.svelte-ds9yw{color:hsl(142.1 76.2% 36.3%)}.feedback-status.close.svelte-ds9yw.svelte-ds9yw{color:hsl(47.9 95.8% 45%)}.detection-display.svelte-ds9yw.svelte-ds9yw{display:flex;flex-direction:column;gap:1rem}.detection-card.svelte-ds9yw.svelte-ds9yw{display:inline-flex;align-items:baseline;gap:0.5rem;padding:1rem 1.5rem;background:hsl(0 0% 100%);border:1px solid hsl(214.3 31.8% 91.4%);border-radius:8px;width:fit-content}.detected-frequency{font-weight:600 !important;font-size:2rem !important;color:hsl(222.2 84% 4.9%) !important;font-family:'SF Mono', 'Monaco', 'Cascadia Mono', 'Roboto Mono', \n                 'JetBrains Mono', 'Fira Code', 'Consolas', monospace !important;min-width:4ch !important;text-align:right !important;display:inline-block !important;font-variant-numeric:tabular-nums !important;-webkit-font-smoothing:antialiased !important;-moz-osx-font-smoothing:grayscale !important}.hz-suffix{font-weight:600 !important;font-size:2rem !important;color:hsl(222.2 84% 4.9%) !important}.divider{color:hsl(214.3 31.8% 70%) !important;font-size:1.5rem !important;margin:0 0.25rem !important;font-weight:300 !important}.detected-note{font-weight:600 !important;font-size:2rem !important;color:hsl(215.4 16.3% 46.9%) !important;font-family:'SF Mono', 'Monaco', 'Cascadia Mono', 'Roboto Mono', \n                 'JetBrains Mono', 'Fira Code', 'Consolas', monospace !important;min-width:3ch !important;display:inline-block !important;text-align:center !important}.volume-bar{border-radius:4px !important}.detected-info.svelte-ds9yw.svelte-ds9yw{display:flex;align-items:center;gap:0.5rem;font-size:0.875rem}.detected-label.svelte-ds9yw.svelte-ds9yw{color:hsl(215.4 16.3% 46.9%)}.detected-frequency.svelte-ds9yw.svelte-ds9yw{font-weight:700;font-size:1.25rem;color:hsl(222.2 84% 4.9%);margin-right:0.5rem}.detected-note.svelte-ds9yw.svelte-ds9yw{font-weight:500;font-size:0.875rem;color:hsl(215.4 16.3% 46.9%);margin-right:0.25rem}.pitch-diff.svelte-ds9yw.svelte-ds9yw{color:hsl(47.9 95.8% 40%);font-weight:500;margin-left:0.25rem}.volume-section.svelte-ds9yw.svelte-ds9yw{display:flex;flex-direction:column;gap:0.5rem}.volume-label.svelte-ds9yw.svelte-ds9yw{font-size:0.875rem;color:hsl(215.4 16.3% 46.9%)}.modern-volume-bar{border-radius:4px !important}.results-summary.svelte-ds9yw.svelte-ds9yw{display:grid;grid-template-columns:repeat(auto-fit, minmax(150px, 1fr));gap:1rem;margin-bottom:2rem}.result-item.svelte-ds9yw.svelte-ds9yw{text-align:center;padding:1rem;border-radius:6px;background:hsl(0 0% 100%);border:1px solid hsl(214.3 31.8% 91.4%)}.result-label.svelte-ds9yw.svelte-ds9yw{display:block;font-size:0.875rem;color:hsl(215.4 16.3% 46.9%);margin-bottom:0.25rem}.result-value.svelte-ds9yw.svelte-ds9yw{display:block;font-size:1.5rem;font-weight:700;color:hsl(222.2 84% 4.9%)}.result-value.success.svelte-ds9yw.svelte-ds9yw{color:hsl(142.1 76.2% 36.3%)}.detailed-results.svelte-ds9yw.svelte-ds9yw{margin-top:2rem}.detailed-title.svelte-ds9yw.svelte-ds9yw{font-size:1rem;font-weight:600;color:hsl(222.2 84% 4.9%);margin-bottom:1rem;text-align:center}.scale-results.svelte-ds9yw.svelte-ds9yw{display:flex;flex-direction:column;gap:0.5rem}.scale-result-item.svelte-ds9yw.svelte-ds9yw{display:grid;grid-template-columns:1fr auto auto auto;gap:1rem;padding:0.75rem;border-radius:6px;border:1px solid hsl(214.3 31.8% 91.4%);background:hsl(0 0% 100%);align-items:center}.scale-result-item.correct.svelte-ds9yw.svelte-ds9yw{background:hsl(142.1 76.2% 95%);border-color:hsl(142.1 76.2% 80%)}.scale-result-item.incorrect.svelte-ds9yw.svelte-ds9yw{background:hsl(0 84.2% 95%);border-color:hsl(0 84.2% 80%)}.scale-name.svelte-ds9yw.svelte-ds9yw{font-weight:600;color:hsl(222.2 84% 4.9%)}.scale-accuracy.svelte-ds9yw.svelte-ds9yw{font-weight:500;font-family:'SF Mono', 'Monaco', 'Cascadia Mono', 'Roboto Mono', monospace;color:hsl(215.4 16.3% 46.9%)}.scale-cents.svelte-ds9yw.svelte-ds9yw{font-weight:500;font-family:'SF Mono', 'Monaco', 'Cascadia Mono', 'Roboto Mono', monospace;color:hsl(215.4 16.3% 46.9%);font-size:0.875rem}.scale-status.svelte-ds9yw.svelte-ds9yw{text-align:center;font-size:1.125rem}.action-buttons.svelte-ds9yw.svelte-ds9yw{display:flex;gap:0.75rem;justify-content:center;flex-wrap:wrap}.restart-button,.new-base-button{min-width:160px !important;font-weight:500 !important}.common-actions.svelte-ds9yw.svelte-ds9yw{display:flex;gap:0.75rem;justify-content:center;flex-wrap:wrap;margin-top:1.5rem}.error-content.svelte-ds9yw.svelte-ds9yw{text-align:center;padding:2rem 1rem}.error-icon.svelte-ds9yw.svelte-ds9yw,.loading-icon.svelte-ds9yw.svelte-ds9yw{font-size:3rem;margin-bottom:1rem}.error-content.svelte-ds9yw h3.svelte-ds9yw{font-size:1.25rem;font-weight:600;color:hsl(222.2 84% 4.9%);margin-bottom:0.5rem}.error-content.svelte-ds9yw p.svelte-ds9yw{color:hsl(215.4 16.3% 46.9%);margin-bottom:1rem}.recommendation.svelte-ds9yw.svelte-ds9yw{background:hsl(210 40% 98%);border:1px solid hsl(214.3 31.8% 91.4%);border-radius:6px;padding:1rem;margin:1rem 0}.recommendation.svelte-ds9yw p.svelte-ds9yw{margin:0;font-size:0.875rem}@media(min-width: 768px){.scale-guide.svelte-ds9yw.svelte-ds9yw{grid-template-columns:repeat(8, 1fr)}.page-title.svelte-ds9yw.svelte-ds9yw{font-size:2.5rem}.results-summary.svelte-ds9yw.svelte-ds9yw{grid-template-columns:repeat(3, 1fr)}}@media(max-width: 640px){.status-content.svelte-ds9yw.svelte-ds9yw{flex-direction:column;gap:0.5rem}.action-buttons.svelte-ds9yw.svelte-ds9yw{flex-direction:column}.primary-button,.secondary-button{min-width:100% !important}}.warning-card{border:2px solid #fbbf24 !important;background:#fef3c7 !important;margin-bottom:24px !important}.warning-message.svelte-ds9yw.svelte-ds9yw{color:#92400e;margin-bottom:12px}.error-list.svelte-ds9yw.svelte-ds9yw{color:#dc2626;margin:12px 0;padding-left:20px}.error-list.svelte-ds9yw li.svelte-ds9yw{margin-bottom:4px;font-family:monospace;font-size:14px}.fix-instruction.svelte-ds9yw.svelte-ds9yw{color:#059669;margin-top:12px;padding:8px;background:#d1fae5;border-radius:4px;border-left:4px solid #059669}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n  import { onMount, onDestroy } from 'svelte';\\n  import { goto } from '$app/navigation';\\n  import { base } from '$app/paths';\\n  import { page } from '$app/stores';\\n  import Card from '$lib/components/Card.svelte';\\n  import Button from '$lib/components/Button.svelte';\\n  import VolumeBar from '$lib/components/VolumeBar.svelte';\\n  import PitchDisplay from '$lib/components/PitchDisplay.svelte';\\n  import PitchDetector from '$lib/components/PitchDetector.svelte';\\n  import PageLayout from '$lib/components/PageLayout.svelte';\\n  import * as Tone from 'tone';\\n  import { audioManager } from '$lib/audio/AudioManager.js';\\n\\n  // 基本状態管理\\n  let trainingPhase = 'setup'; // 'setup' | 'listening' | 'waiting' | 'guiding' | 'results'\\n  \\n  // マイクテストページからの遷移を早期検出\\n  let microphoneState = (() => {\\n    if (typeof window !== 'undefined') {\\n      const urlParams = new URLSearchParams(window.location.search);\\n      if (urlParams.get('from') === 'microphone-test') {\\n        console.log('🎤 [RandomTraining] 早期検出: マイクテストページからの遷移');\\n        return 'granted';\\n      } else {\\n        console.log('🎤 [RandomTraining] ダイレクトアクセスを検出');\\n        return 'checking';\\n      }\\n    }\\n    return 'checking';\\n  })(); // 'checking' | 'granted' | 'denied' | 'error'\\n  \\n  // シンプルな状態管理\\n  let microphoneHealthy = true; // マイク健康状態\\n  let microphoneErrors = []; // マイクエラー詳細\\n  \\n  // デバッグ情報（強制更新）\\n  const buildVersion = \\"v1.3.2-FORCE\\";\\n  const buildTimestamp = \\"07/27 02:20\\";\\n  const updateStatus = \\"🔥 ROSE色修正・音源削除・評価改善\\";\\n  \\n  // 基音関連\\n  let currentBaseNote = '';\\n  let currentBaseFrequency = 0;\\n  let isPlaying = false;\\n  \\n  // 音程ガイド\\n  let currentScaleIndex = 0;\\n  let scaleSteps = [\\n    { name: 'ド', state: 'inactive', completed: false },\\n    { name: 'レ', state: 'inactive', completed: false },\\n    { name: 'ミ', state: 'inactive', completed: false },\\n    { name: 'ファ', state: 'inactive', completed: false },\\n    { name: 'ソ', state: 'inactive', completed: false },\\n    { name: 'ラ', state: 'inactive', completed: false },\\n    { name: 'シ', state: 'inactive', completed: false },\\n    { name: 'ド（高）', state: 'inactive', completed: false }\\n  ];\\n  \\n  // ガイドアニメーション制御\\n  let guideAnimationTimer = null;\\n  let isGuideAnimationActive = false;\\n  \\n  // 裏での評価蓄積\\n  let scaleEvaluations = [];\\n  \\n  // 前回の結果保持（再挑戦時表示用）\\n  let previousEvaluations = [];\\n  \\n  // 音程検出\\n  let currentVolume = 0;\\n  let currentFrequency = 0;\\n  let detectedNote = 'ーー';\\n  let pitchDifference = 0;\\n  \\n  // セッション結果\\n  let sessionResults = {\\n    correctCount: 0,\\n    totalCount: 8,\\n    averageAccuracy: 0,\\n    averageTime: 0,\\n    isCompleted: false\\n  };\\n  \\n  // Tone.jsサンプラー\\n  let sampler = null;\\n  let isLoading = true;\\n  \\n  // 音程検出コンポーネント\\n  let pitchDetectorComponent = null;\\n  \\n  // AudioManager対応変数\\n  let mediaStream = null;   // AudioManagerから取得\\n  let audioContext = null;  // AudioManagerから取得\\n  let sourceNode = null;    // AudioManagerから取得\\n\\n  // 基音候補（存在する音源ファイルに合わせた10種類）\\n  const baseNotes = [\\n    { note: 'C4', name: 'ド（中）', frequency: 261.63 },\\n    { note: 'Db4', name: 'ド#（中）', frequency: 277.18 },\\n    { note: 'D4', name: 'レ（中）', frequency: 293.66 },\\n    { note: 'Eb4', name: 'レ#（中）', frequency: 311.13 },\\n    { note: 'E4', name: 'ミ（中）', frequency: 329.63 },\\n    { note: 'F4', name: 'ファ（中）', frequency: 349.23 },\\n    { note: 'Gb4', name: 'ファ#（中）', frequency: 369.99 },\\n    { note: 'Ab4', name: 'ラb（中）', frequency: 415.30 },\\n    { note: 'Bb3', name: 'シb（低）', frequency: 233.08 },\\n    { note: 'B3', name: 'シ（低）', frequency: 246.94 }\\n  ];\\n\\n  // マイク許可確認（AudioManager対応版）\\n  async function checkMicrophonePermission() {\\n    microphoneState = 'checking';\\n    \\n    try {\\n      console.log('🎤 [RandomTraining] AudioManager経由でマイク許可確認開始');\\n      \\n      if (!navigator.mediaDevices?.getUserMedia) {\\n        microphoneState = 'error';\\n        return;\\n      }\\n      \\n      // AudioManagerから共有リソースを取得（重複取得は安全）\\n      const resources = await audioManager.initialize();\\n      audioContext = resources.audioContext;\\n      mediaStream = resources.mediaStream;\\n      sourceNode = resources.sourceNode;\\n      \\n      console.log('✅ [RandomTraining] AudioManager リソース取得完了');\\n      \\n      microphoneState = 'granted';\\n      trainingPhase = 'setup';\\n      \\n      // PitchDetector初期化（外部AudioContext方式）\\n      setTimeout(async () => {\\n        if (pitchDetectorComponent) {\\n          console.log('🎙️ [RandomTraining] PitchDetector初期化開始');\\n          await pitchDetectorComponent.initialize();\\n          console.log('✅ [RandomTraining] PitchDetector初期化完了');\\n        }\\n      }, 200);\\n      \\n    } catch (error) {\\n      console.error('❌ [RandomTraining] マイク許可エラー:', error);\\n      microphoneState = (error?.name === 'NotAllowedError') ? 'denied' : 'error';\\n    }\\n  }\\n\\n  // ランダム基音選択\\n  function selectRandomBaseNote() {\\n    const randomIndex = Math.floor(Math.random() * baseNotes.length);\\n    const selectedNote = baseNotes[randomIndex];\\n    currentBaseNote = selectedNote.name;\\n    currentBaseFrequency = selectedNote.frequency;\\n  }\\n\\n  // ランダム基音再生（新しい基音を選択）\\n  async function playRandomBaseNote() {\\n    if (isPlaying || !sampler || isLoading) return;\\n    \\n    // マイク許可が未取得の場合は先に許可を取得\\n    if (microphoneState !== 'granted') {\\n      console.log('🎤 [RandomTraining] マイク許可が必要です。許可取得を開始...');\\n      try {\\n        await checkMicrophonePermission();\\n        console.log('🎤 [RandomTraining] マイク許可取得完了');\\n      } catch (error) {\\n        console.error('❌ マイク許可エラー:', error);\\n        return;\\n      }\\n    }\\n    \\n    // AudioManagerリソースが初期化されていない場合のみ初期化\\n    if (!mediaStream && microphoneState === 'granted') {\\n      console.log('🎤 [RandomTraining] AudioManagerリソース未初期化のため取得します');\\n      try {\\n        await checkMicrophonePermission();\\n      } catch (error) {\\n        console.error('❌ AudioManagerリソース初期化エラー:', error);\\n        return;\\n      }\\n    } else if (mediaStream) {\\n      console.log('🎤 [RandomTraining] AudioManagerリソース既存のため再利用');\\n    }\\n    \\n    // 即座に状態変更\\n    isPlaying = true;\\n    trainingPhase = 'listening';\\n    selectRandomBaseNote(); // 新しいランダム基音を選択\\n    \\n    // 音声再生\\n    const note = baseNotes.find(n => n.name === currentBaseNote).note;\\n    sampler.triggerAttackRelease(note, 2, Tone.now(), 0.7);\\n    \\n    // 2.5秒後にガイドアニメーション開始\\n    setTimeout(() => {\\n      isPlaying = false;\\n      trainingPhase = 'waiting';\\n      setTimeout(() => startGuideAnimation(), 500);\\n    }, 2000);\\n  }\\n\\n  // 現在の基音再生（既存の基音を再利用）\\n  async function playCurrentBaseNote() {\\n    if (isPlaying || !sampler || isLoading || !currentBaseNote) return;\\n    \\n    // マイク許可が未取得の場合は先に許可を取得\\n    if (microphoneState !== 'granted') {\\n      console.log('🎤 [RandomTraining] マイク許可が必要です。許可取得を開始...');\\n      try {\\n        await checkMicrophonePermission();\\n        console.log('🎤 [RandomTraining] マイク許可取得完了');\\n      } catch (error) {\\n        console.error('❌ マイク許可エラー:', error);\\n        return;\\n      }\\n    }\\n    \\n    // AudioManagerリソースが初期化されていない場合のみ初期化\\n    if (!mediaStream && microphoneState === 'granted') {\\n      console.log('🎤 [RandomTraining] AudioManagerリソース未初期化のため取得します');\\n      try {\\n        await checkMicrophonePermission();\\n      } catch (error) {\\n        console.error('❌ AudioManagerリソース初期化エラー:', error);\\n        return;\\n      }\\n    } else if (mediaStream) {\\n      console.log('🎤 [RandomTraining] AudioManagerリソース既存のため再利用');\\n    }\\n    \\n    // 即座に状態変更\\n    isPlaying = true;\\n    trainingPhase = 'listening';\\n    // selectRandomBaseNote() は呼ばない - 既存の基音を保持\\n    \\n    // 音声再生\\n    const note = baseNotes.find(n => n.name === currentBaseNote).note;\\n    sampler.triggerAttackRelease(note, 2, Tone.now(), 0.7);\\n    \\n    // 2.5秒後にガイドアニメーション開始\\n    setTimeout(() => {\\n      isPlaying = false;\\n      trainingPhase = 'waiting';\\n      setTimeout(() => startGuideAnimation(), 500);\\n    }, 2000);\\n  }\\n\\n  // 基音再生（統合関数 - 状況に応じて適切な関数を呼び分け）\\n  function playBaseNote() {\\n    if (currentBaseNote && currentBaseFrequency > 0) {\\n      // 既に基音が設定されている場合は既存の基音を再生\\n      playCurrentBaseNote();\\n    } else {\\n      // 基音が未設定の場合は新しいランダム基音を選択\\n      playRandomBaseNote();\\n    }\\n  }\\n\\n  // ガイドアニメーション開始（簡素版）\\n  function startGuideAnimation() {\\n    // シンプルな状態変更のみ\\n    trainingPhase = 'guiding';\\n    currentScaleIndex = 0;\\n    isGuideAnimationActive = true;\\n    scaleEvaluations = [];\\n    \\n    // 各ステップを順次ハイライト（1秒間隔）\\n    function animateNextStep() {\\n      if (currentScaleIndex < scaleSteps.length) {\\n        // 前のステップを非アクティブに\\n        if (currentScaleIndex > 0) {\\n          scaleSteps[currentScaleIndex - 1].state = 'inactive';\\n        }\\n        \\n        // 現在のステップをアクティブに\\n        scaleSteps[currentScaleIndex].state = 'active';\\n        \\n        currentScaleIndex++;\\n        \\n        // 0.6秒後に次のステップ（テンポアップ）\\n        guideAnimationTimer = setTimeout(animateNextStep, 600);\\n      } else {\\n        // アニメーション完了\\n        finishGuideAnimation();\\n      }\\n    }\\n    \\n    animateNextStep();\\n  }\\n  \\n  // ガイドアニメーション完了\\n  function finishGuideAnimation() {\\n    isGuideAnimationActive = false;\\n    \\n    // 最後のステップも非アクティブに\\n    if (scaleSteps.length > 0) {\\n      scaleSteps[scaleSteps.length - 1].state = 'inactive';\\n    }\\n    \\n    // 音程検出停止\\n    if (pitchDetectorComponent) {\\n      pitchDetectorComponent.stopDetection();\\n    }\\n    \\n    // 採点結果を計算して表示\\n    calculateFinalResults();\\n    trainingPhase = 'results';\\n  }\\n  \\n  // 最終採点結果計算\\n  function calculateFinalResults() {\\n    let correctCount = 0;\\n    let totalAccuracy = 0;\\n    \\n    scaleEvaluations.forEach(evaluation => {\\n      if (evaluation.isCorrect) {\\n        correctCount++;\\n      }\\n      totalAccuracy += evaluation.accuracy;\\n    });\\n    \\n    sessionResults = {\\n      correctCount: correctCount,\\n      totalCount: scaleSteps.length,\\n      averageAccuracy: scaleEvaluations.length > 0 ? Math.round(totalAccuracy / scaleEvaluations.length) : 0,\\n      averageTime: 0, // 今回は時間測定なし\\n      isCompleted: true\\n    };\\n    \\n    // 前回の結果として保存（再挑戦時表示用）\\n    if (scaleEvaluations.length > 0) {\\n      previousEvaluations = [...scaleEvaluations];\\n    }\\n  }\\n\\n  // ステータスメッセージ取得\\n  function getStatusMessage() {\\n    switch (trainingPhase) {\\n      case 'setup':\\n        if (isLoading || !sampler) {\\n          return '🎵 音源読み込み中...';\\n        } else {\\n          return '🎤 マイク準備完了 - トレーニング開始可能';\\n        }\\n      case 'listening':\\n        return '🎵 基音再生中...';\\n      case 'waiting':\\n        return '⏳ 間もなく開始...';\\n      case 'guiding':\\n        return '🎙️ ガイドに合わせてドレミファソラシドを歌ってください';\\n      case 'results':\\n        return '🎉 採点結果';\\n      default:\\n        return '🔄 準備中...';\\n    }\\n  }\\n\\n  // 表示用の評価データを取得\\n  function getDisplayEvaluations() {\\n    // 現在のセッションに評価データがある場合は現在のデータを表示\\n    if (scaleEvaluations.length > 0) {\\n      return scaleEvaluations;\\n    }\\n    // 現在のセッションにデータがない場合は前回の結果を表示\\n    if (previousEvaluations.length > 0) {\\n      return previousEvaluations;\\n    }\\n    return [];\\n  }\\n\\n  // マイクテストページへの誘導（SvelteKit goto使用）\\n  function goToMicrophoneTest() {\\n    goto(\`\${base}/microphone-test\`);\\n  }\\n\\n  // ホームページに戻る（SvelteKit goto使用）\\n  function goHome() {\\n    goto(\`\${base}/\`);\\n  }\\n\\n  // Tone.jsサンプラー初期化（Salamander Grand Piano - 最適化版）\\n  async function initializeSampler() {\\n    try {\\n      isLoading = true;\\n      \\n      // AudioContextは初回再生時に起動（安全なアプローチ）\\n      \\n      // Salamander Grand Piano C4音源からピッチシフト（最適化設定）\\n      sampler = new Tone.Sampler({\\n        urls: {\\n          'C4': 'C4.mp3',\\n        },\\n        baseUrl: \`\${base}/audio/piano/\`,\\n        release: 1.5, // リリース時間最適化\\n        onload: () => {\\n          isLoading = false;\\n        },\\n        onerror: (error) => {\\n          console.error('❌ Salamander Piano音源読み込みエラー:', error);\\n          isLoading = false;\\n        }\\n      }).toDestination();\\n      \\n      // 音量調整\\n      sampler.volume.value = -6; // デフォルトより少し下げる\\n      \\n    } catch (error) {\\n      console.error('サンプラー初期化エラー:', error);\\n      isLoading = false;\\n    }\\n  }\\n  \\n  // マイク許可状態確認（取得はしない）\\n  async function checkExistingMicrophonePermission() {\\n    try {\\n      // Permissions API でマイク許可状態を確認（ダイアログは出ない）\\n      const permissionStatus = await navigator.permissions.query({ name: 'microphone' });\\n      \\n      if (permissionStatus.state === 'granted') {\\n        // 既に許可済みの場合のみストリーム取得\\n        await checkMicrophonePermission();\\n      } else {\\n        // 未許可の場合はエラー画面表示\\n        microphoneState = 'denied';\\n      }\\n    } catch (error) {\\n      // Permissions API 未対応の場合は従来の方法\\n      microphoneState = 'denied';\\n    }\\n  }\\n\\n  // 初期化\\n  onMount(async () => {\\n    // 音源初期化\\n    initializeSampler();\\n    \\n    // マイクテストページから来た場合は許可済みとして扱う\\n    if ($page.url.searchParams.get('from') === 'microphone-test') {\\n      console.log('🎤 [RandomTraining] マイクテストページからの遷移を検出');\\n      \\n      // URLパラメータを削除（お気に入り登録時の問題回避）\\n      const url = new URL(window.location);\\n      url.searchParams.delete('from');\\n      window.history.replaceState({}, '', url);\\n      \\n      // マイクテストページから来た場合は許可済みとして扱い、ストリームを準備\\n      microphoneState = 'granted';\\n      trainingPhase = 'setup';\\n      console.log('🎤 [RandomTraining] microphoneState=\\"granted\\", trainingPhase=\\"setup\\" に設定');\\n      \\n      // AudioManagerリソースの事前取得（スムーズな再生のため）\\n      setTimeout(async () => {\\n        if (!mediaStream) {\\n          console.log('🎤 [RandomTraining] 事前AudioManagerリソース取得開始');\\n          try {\\n            await checkMicrophonePermission();\\n            console.log('🎤 [RandomTraining] 事前AudioManagerリソース取得完了');\\n          } catch (error) {\\n            console.warn('⚠️ 事前AudioManagerリソース取得失敗（後で再試行）:', error);\\n          }\\n        }\\n      }, 100);\\n      return;\\n    }\\n    \\n    // ダイレクトアクセス時のみマイク許可状態確認\\n    await new Promise(resolve => setTimeout(resolve, 100));\\n    checkExistingMicrophonePermission();\\n  });\\n  \\n  // PitchDetectorコンポーネントからのイベントハンドラー\\n  function handlePitchUpdate(event) {\\n    const { frequency, note, volume, rawVolume, clarity } = event.detail;\\n    \\n    currentFrequency = frequency;\\n    detectedNote = note;\\n    currentVolume = volume;\\n    \\n    // 基音との相対音程を計算\\n    if (currentBaseFrequency > 0 && frequency > 0) {\\n      pitchDifference = Math.round(1200 * Math.log2(frequency / currentBaseFrequency));\\n    } else {\\n      pitchDifference = 0;\\n    }\\n    \\n    // ガイドアニメーション中の評価蓄積\\n    evaluateScaleStep(frequency, note);\\n  }\\n  \\n  // 裏での評価蓄積（ガイドアニメーション中）\\n  function evaluateScaleStep(frequency, note) {\\n    if (!frequency || frequency <= 0 || !currentBaseFrequency || !isGuideAnimationActive) {\\n      return;\\n    }\\n    \\n    // 現在ハイライト中のステップを取得（currentScaleIndex - 1が実際にハイライト中）\\n    const activeStepIndex = currentScaleIndex - 1;\\n    if (activeStepIndex < 0 || activeStepIndex >= scaleSteps.length) {\\n      return;\\n    }\\n    \\n    // 期待される周波数を計算（基音からの相対音程）\\n    const scaleIntervals = [0, 2, 4, 5, 7, 9, 11, 12]; // ドレミファソラシド（半音）\\n    const expectedInterval = scaleIntervals[activeStepIndex] * 100; // セント\\n    const expectedFrequency = currentBaseFrequency * Math.pow(2, expectedInterval / 1200);\\n    \\n    // 音程差を計算（セント）\\n    const centDifference = Math.round(1200 * Math.log2(frequency / expectedFrequency));\\n    \\n    // 判定基準（±50セント以内で正解）\\n    const tolerance = 50;\\n    const isCorrect = Math.abs(centDifference) <= tolerance;\\n    \\n    // 最低音量基準（ノイズ除外）\\n    const minVolumeForDetection = 15;\\n    const hasEnoughVolume = currentVolume >= minVolumeForDetection;\\n    \\n    if (hasEnoughVolume) {\\n      // 精度計算（100 - |centDifference|の割合）\\n      const accuracy = Math.max(0, Math.round(100 - Math.abs(centDifference)));\\n      \\n      // 評価を蓄積（上書きして最新の評価を保持）\\n      const existingIndex = scaleEvaluations.findIndex(evaluation => evaluation.stepIndex === activeStepIndex);\\n      const evaluation = {\\n        stepIndex: activeStepIndex,\\n        stepName: scaleSteps[activeStepIndex].name,\\n        expectedFrequency: Math.round(expectedFrequency),\\n        detectedFrequency: Math.round(frequency),\\n        centDifference: centDifference,\\n        accuracy: accuracy,\\n        isCorrect: isCorrect,\\n        timestamp: Date.now()\\n      };\\n      \\n      if (existingIndex >= 0) {\\n        scaleEvaluations[existingIndex] = evaluation;\\n      } else {\\n        scaleEvaluations.push(evaluation);\\n      }\\n      \\n      // デバッグログ削除（サイレント蓄積）\\n    }\\n  }\\n  \\n  // セッション完了処理\\n  function completeSession() {\\n    trainingPhase = 'completed';\\n    sessionResults.isCompleted = true;\\n    sessionResults.averageAccuracy = Math.round((sessionResults.correctCount / sessionResults.totalCount) * 100);\\n    \\n    // 音程検出停止\\n    if (pitchDetectorComponent) {\\n      pitchDetectorComponent.stopDetection();\\n    }\\n  }\\n  \\n  // 同じ基音で再挑戦\\n  function restartSameBaseNote() {\\n    // 1. ページトップにスクロール（強化版）\\n    scrollToTop();\\n    \\n    // 2. UI状態のみ変更（即座画面遷移）\\n    trainingPhase = 'setup';\\n    \\n    // 3. 最小限のクリーンアップ\\n    if (guideAnimationTimer) {\\n      clearTimeout(guideAnimationTimer);\\n      guideAnimationTimer = null;\\n    }\\n    \\n    // 4. PitchDetectorの表示状態をリセット\\n    if (pitchDetectorComponent && pitchDetectorComponent.resetDisplayState) {\\n      pitchDetectorComponent.resetDisplayState();\\n    }\\n    \\n    // 5. セッション状態リセット（基音は保持）\\n    resetSessionState();\\n    // 注意: currentBaseNote と currentBaseFrequency は保持される\\n  }\\n  \\n  // 違う基音で開始\\n  function restartDifferentBaseNote() {\\n    // 1. ページトップにスクロール（強化版）\\n    scrollToTop();\\n    \\n    // 2. UI状態のみ変更（即座画面遷移）\\n    trainingPhase = 'setup';\\n    \\n    // 3. 最小限のクリーンアップ\\n    if (guideAnimationTimer) {\\n      clearTimeout(guideAnimationTimer);\\n      guideAnimationTimer = null;\\n    }\\n    \\n    // 4. 基音情報もリセット\\n    currentBaseNote = '';\\n    currentBaseFrequency = 0;\\n    \\n    // 5. PitchDetectorの表示状態をリセット\\n    if (pitchDetectorComponent && pitchDetectorComponent.resetDisplayState) {\\n      pitchDetectorComponent.resetDisplayState();\\n    }\\n    \\n    // 6. セッション状態リセット\\n    resetSessionState();\\n  }\\n  \\n  // 強化版スクロール関数（ブラウザ互換性対応）\\n  function scrollToTop() {\\n    try {\\n      // 方法 1: モダンブラウザのスムーススクロール\\n      if ('scrollTo' in window && 'behavior' in document.documentElement.style) {\\n        window.scrollTo({ top: 0, behavior: 'smooth' });\\n      } else {\\n        // 方法 2: 古いブラウザの即座スクロール\\n        window.scrollTo(0, 0);\\n      }\\n      \\n      // 方法 3: document.body と documentElement のフォールバック\\n      if (document.body) {\\n        document.body.scrollTop = 0;\\n      }\\n      if (document.documentElement) {\\n        document.documentElement.scrollTop = 0;\\n      }\\n      \\n      // 方法 4: ページ内のスクロールコンテナ対応\\n      const scrollContainers = document.querySelectorAll('[data-scroll-container], .scroll-container, main');\\n      scrollContainers.forEach(container => {\\n        if (container.scrollTo) {\\n          container.scrollTo(0, 0);\\n        } else {\\n          container.scrollTop = 0;\\n        }\\n      });\\n      \\n    } catch (error) {\\n      console.warn('スクロールエラー:', error);\\n      // 最後の手段: 強制的なリロードを避けて基本的なスクロール\\n      try {\\n        window.scroll(0, 0);\\n      } catch (fallbackError) {\\n        console.error('スクロール完全失敗:', fallbackError);\\n      }\\n    }\\n  }\\n\\n  // セッション状態リセット\\n  function resetSessionState() {\\n    currentScaleIndex = 0;\\n    isGuideAnimationActive = false;\\n    scaleEvaluations = []; // 現在のセッション評価はクリア\\n    // previousEvaluations は保持（前回の結果を残す）\\n    \\n    // スケールガイドリセット\\n    scaleSteps = scaleSteps.map(step => ({\\n      ...step,\\n      state: 'inactive',\\n      completed: false\\n    }));\\n    \\n  }\\n  \\n  \\n\\n  \\n  // リアクティブシステム\\n  $: canStartTraining = microphoneState === 'granted' && !isLoading && sampler && microphoneHealthy;\\n  $: canRestartSession = trainingPhase === 'results';\\n  \\n  // 状態変化時の自動スクロール（ダイレクトアクセス、マイク許可後の画面遷移時）\\n  $: if (trainingPhase === 'setup' && microphoneState === 'granted') {\\n    scrollToTop();\\n  }\\n\\n\\n  // PitchDetectorイベントハンドラー（簡素版）\\n  function handlePitchDetectorStateChange(event) {\\n    // ログ削除\\n  }\\n  \\n  function handlePitchDetectorError(event) {\\n    console.error('❌ PitchDetectorエラー:', event.detail);\\n  }\\n  \\n  // マイク健康状態変化ハンドラー\\n  function handleMicrophoneHealthChange(event) {\\n    const { healthy, errors, details } = event.detail;\\n    microphoneHealthy = healthy;\\n    microphoneErrors = errors;\\n    \\n    if (!healthy) {\\n      console.warn('⚠️ マイクの健康状態が悪化:', errors);\\n      // 深刻な問題の場合はトレーニングを停止\\n      if (trainingPhase === 'guiding') {\\n        trainingPhase = 'setup';\\n        console.warn('🛑 マイク問題によりトレーニングを停止');\\n      }\\n    }\\n  }\\n\\n  // クリーンアップ\\n  onDestroy(() => {\\n    console.log('🔄 [RandomTraining] onDestroy - AudioManagerリソースは保持');\\n    \\n    // PitchDetectorは使い回しのためcleanupしない\\n    // AudioManagerがリソースを管理するため、ここでは解放しない\\n    \\n    if (sampler) {\\n      sampler.dispose();\\n      sampler = null;\\n    }\\n  });\\n<\/script>\\n\\n<PageLayout>\\n  <!-- Header -->\\n  <div class=\\"header-section\\">\\n    <h1 class=\\"page-title\\">🎵 ランダム基音トレーニング</h1>\\n    <p class=\\"page-description\\">10種類の基音からランダムに選択してドレミファソラシドを練習</p>\\n    <div class=\\"debug-info\\">\\n      📱 {buildVersion} | {buildTimestamp}<br/>\\n      <small style=\\"font-size: 0.6rem;\\">{updateStatus}</small>\\n    </div>\\n  </div>\\n\\n\\n  {#if microphoneState === 'granted'}\\n    <!-- PitchDetector: 常に存在（セッション間で破棄されない） -->\\n    <div style=\\"display: none;\\">\\n      <PitchDetector\\n        bind:this={pitchDetectorComponent}\\n        isActive={trainingPhase === 'guiding'}\\n        on:pitchUpdate={handlePitchUpdate}\\n        on:stateChange={handlePitchDetectorStateChange}\\n        on:error={handlePitchDetectorError}\\n        on:microphoneHealthChange={handleMicrophoneHealthChange}\\n        className=\\"pitch-detector-content\\"\\n        debugMode={true}\\n      />\\n    </div>\\n\\n    <!-- メイントレーニングインターフェース -->\\n    \\n    {#if trainingPhase !== 'results'}\\n      <!-- Base Tone and Detection Side by Side -->\\n      <!-- マイク健康状態警告（問題がある場合のみ表示） -->\\n      {#if !microphoneHealthy && microphoneErrors.length > 0}\\n        <Card class=\\"warning-card\\">\\n          <div class=\\"card-header\\">\\n            <h3 class=\\"section-title\\">⚠️ マイク接続に問題があります</h3>\\n          </div>\\n          <div class=\\"card-content\\">\\n            <p class=\\"warning-message\\">マイクが正常に動作していません。以下の問題が検出されました：</p>\\n            <ul class=\\"error-list\\">\\n              {#each microphoneErrors as error}\\n                <li>{error}</li>\\n              {/each}\\n            </ul>\\n            <p class=\\"fix-instruction\\">\\n              <strong>解決方法:</strong> ページを再読み込みしてマイク許可を再度取得してください。\\n            </p>\\n          </div>\\n        </Card>\\n      {/if}\\n\\n      <div class=\\"side-by-side-container\\">\\n        <!-- Base Tone Section -->\\n        <Card class=\\"main-card half-width\\">\\n          <div class=\\"card-header\\">\\n            <h3 class=\\"section-title\\">🎹 基音再生</h3>\\n          </div>\\n          <div class=\\"card-content\\">\\n            <Button \\n              variant=\\"primary\\"\\n              disabled={isPlaying || trainingPhase === 'guiding' || trainingPhase === 'waiting'}\\n              on:click={playBaseNote}\\n            >\\n              {#if isPlaying}\\n                🎵 再生中...\\n              {:else if currentBaseNote && currentBaseFrequency > 0}\\n                🔄 {currentBaseNote} 再生\\n              {:else}\\n                🎹 ランダム基音再生\\n              {/if}\\n            </Button>\\n            \\n            {#if currentBaseNote}\\n              <div class=\\"base-note-info\\">\\n                現在の基音: <strong>{currentBaseNote}</strong> ({currentBaseFrequency.toFixed(1)}Hz)\\n              </div>\\n            {/if}\\n          </div>\\n        </Card>\\n\\n        <!-- Detection Section (Display Only) -->\\n        <Card class=\\"main-card half-width\\">\\n          <div class=\\"card-header\\">\\n            <h3 class=\\"section-title\\">🎙️ リアルタイム音程検出</h3>\\n          </div>\\n          <div class=\\"card-content\\">\\n            <!-- データ表示のみ（実際のPitchDetectorは上に隠して配置） -->\\n            <div class=\\"pitch-detector\\">\\n              <div class=\\"detection-display\\">\\n                <div class=\\"detection-card\\">\\n                  <span class=\\"detected-frequency\\">{currentFrequency > 0 ? Math.round(currentFrequency) : '---'}</span>\\n                  <span class=\\"hz-suffix\\">Hz</span>\\n                  <span class=\\"divider\\">|</span>\\n                  <span class=\\"detected-note\\">{detectedNote}</span>\\n                </div>\\n                \\n                <VolumeBar volume={currentFrequency > 0 ? currentVolume : 0} className=\\"volume-bar\\" />\\n              </div>\\n            </div>\\n            \\n          </div>\\n        </Card>\\n      </div>\\n    {/if}\\n\\n    {#if trainingPhase !== 'results'}\\n      <!-- Scale Guide Section -->\\n      <Card class=\\"main-card\\">\\n        <div class=\\"card-header\\">\\n          <h3 class=\\"section-title\\">🎵 ドレミ音階ガイド</h3>\\n        </div>\\n        <div class=\\"card-content\\">\\n          <div class=\\"scale-guide\\">\\n            {#each scaleSteps as step, index}\\n              <div \\n                class=\\"scale-item {step.state}\\"\\n              >\\n                {step.name}\\n              </div>\\n            {/each}\\n          </div>\\n          {#if trainingPhase === 'guiding'}\\n            <div class=\\"guide-instruction\\">\\n              ガイドに合わせて <strong>ドレミファソラシド</strong> を歌ってください\\n            </div>\\n          {/if}\\n        </div>\\n      </Card>\\n    {/if}\\n\\n\\n    <!-- Results Section -->\\n    {#if trainingPhase === 'results'}\\n      <Card class=\\"main-card results-card\\">\\n        <div class=\\"card-header\\">\\n          <h3 class=\\"section-title\\">🎉 採点結果</h3>\\n        </div>\\n        <div class=\\"card-content\\">\\n          <div class=\\"results-summary\\">\\n            <div class=\\"result-item\\">\\n              <span class=\\"result-label\\">正解数</span>\\n              <span class=\\"result-value success\\">{sessionResults.correctCount}/{sessionResults.totalCount}</span>\\n            </div>\\n            <div class=\\"result-item\\">\\n              <span class=\\"result-label\\">平均精度</span>\\n              <span class=\\"result-value\\">{sessionResults.averageAccuracy}%</span>\\n            </div>\\n            <div class=\\"result-item\\">\\n              <span class=\\"result-label\\">正解率</span>\\n              <span class=\\"result-value\\">{Math.round(sessionResults.correctCount / sessionResults.totalCount * 100)}%</span>\\n            </div>\\n          </div>\\n          \\n          <!-- 詳細結果 -->\\n          <div class=\\"detailed-results\\">\\n            <h4 class=\\"detailed-title\\">音階別結果</h4>\\n            {#if getDisplayEvaluations().length > 0}\\n              <div class=\\"scale-results\\">\\n                {#each getDisplayEvaluations() as evaluation, index}\\n                  <div class=\\"scale-result-item\\" class:correct={evaluation.isCorrect} class:incorrect={!evaluation.isCorrect}>\\n                    <span class=\\"scale-name\\">{evaluation.stepName}</span>\\n                    <span class=\\"scale-accuracy\\">{evaluation.accuracy}%</span>\\n                    <span class=\\"scale-cents\\">{evaluation.centDifference >= 0 ? '+' : ''}{evaluation.centDifference}¢</span>\\n                    <span class=\\"scale-status\\">{evaluation.isCorrect ? '✅' : '❌'}</span>\\n                  </div>\\n                {/each}\\n              </div>\\n            {:else}\\n              <div class=\\"no-evaluation-data\\">\\n                <p>評価データがありません。トレーニング中にマイクから十分な音声が検出されませんでした。</p>\\n              </div>\\n            {/if}\\n          </div>\\n          \\n          <div class=\\"action-buttons\\">\\n            <Button \\n              variant=\\"primary\\"\\n              class=\\"restart-button\\" \\n              disabled={!canRestartSession}\\n              on:click={restartSameBaseNote}\\n            >\\n              同じ基音で再挑戦\\n            </Button>\\n            <Button \\n              variant=\\"primary\\"\\n              class=\\"new-base-button\\" \\n              disabled={!canRestartSession}\\n              on:click={restartDifferentBaseNote}\\n            >\\n              違う基音で開始\\n            </Button>\\n          </div>\\n        </div>\\n      </Card>\\n    {/if}\\n\\n    <!-- 共通アクションボタン（採点結果エリア外） -->\\n    {#if trainingPhase === 'results'}\\n      <div class=\\"common-actions\\">\\n        <Button class=\\"secondary-button\\">\\n          🎊 SNS共有\\n        </Button>\\n        <Button class=\\"secondary-button\\" on:click={goHome}>\\n          🏠 ホーム\\n        </Button>\\n      </div>\\n    {/if}\\n\\n  {:else}\\n    <!-- Direct Access Error State -->\\n    <Card class=\\"error-card\\">\\n      <div class=\\"error-content\\">\\n        <div class=\\"error-icon\\">🎤</div>\\n        <h3>マイクテストが必要です</h3>\\n        <p>ランダム基音トレーニングを開始する前に、マイクテストページで音声入力の確認をお願いします。</p>\\n        \\n        <div class=\\"recommendation\\">\\n          <p>このページは<strong>マイクテスト完了後</strong>にご利用いただけます。</p>\\n          <p>まずはマイクテストページで音声確認を行ってください。</p>\\n        </div>\\n        \\n        <div class=\\"action-buttons\\">\\n          <Button variant=\\"primary\\" on:click={goToMicrophoneTest}>\\n            🎤 マイクテストページへ移動\\n          </Button>\\n          <Button variant=\\"secondary\\" on:click={checkMicrophonePermission}>\\n            🎙️ 直接マイク許可を取得\\n          </Button>\\n          <Button variant=\\"secondary\\" on:click={goHome}>\\n            🏠 ホームに戻る\\n          </Button>\\n        </div>\\n      </div>\\n    </Card>\\n  {/if}\\n</PageLayout>\\n\\n<style>\\n  /* === shadcn/ui風モダンデザイン === */\\n  \\n  /* ヘッダーセクション */\\n  .header-section {\\n    text-align: center;\\n    margin-bottom: 2rem;\\n  }\\n  \\n  .page-title {\\n    font-size: 2rem;\\n    font-weight: 700;\\n    color: hsl(222.2 84% 4.9%);\\n    margin-bottom: 0.5rem;\\n  }\\n  \\n  .page-description {\\n    color: hsl(215.4 16.3% 46.9%);\\n    font-size: 1rem;\\n    margin: 0;\\n  }\\n\\n  /* カードスタイル（shadcn/ui風） */\\n  :global(.main-card) {\\n    border: 1px solid hsl(214.3 31.8% 91.4%) !important;\\n    background: hsl(0 0% 100%) !important;\\n    border-radius: 8px !important;\\n    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px 0 rgb(0 0 0 / 0.06) !important;\\n    margin-bottom: 1.5rem;\\n  }\\n  \\n  :global(.status-card) {\\n    border-radius: 8px !important;\\n    margin-bottom: 1.5rem;\\n  }\\n  \\n  :global(.error-card) {\\n    border: 1px solid hsl(0 84.2% 60.2%) !important;\\n    background: hsl(0 84.2% 97%) !important;\\n    border-radius: 8px !important;\\n    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1) !important;\\n  }\\n  \\n  :global(.results-card) {\\n    border: 1px solid hsl(142.1 76.2% 36.3%) !important;\\n    background: linear-gradient(135deg, hsl(142.1 76.2% 95%) 0%, hsl(0 0% 100%) 100%) !important;\\n  }\\n\\n  /* カードヘッダー */\\n  .card-header {\\n    padding-bottom: 1rem;\\n    border-bottom: 1px solid hsl(214.3 31.8% 91.4%);\\n    margin-bottom: 1.5rem;\\n  }\\n  \\n  .section-title {\\n    font-size: 1.125rem;\\n    font-weight: 600;\\n    color: hsl(222.2 84% 4.9%);\\n    margin: 0;\\n  }\\n\\n  /* カードコンテンツ */\\n  .card-content {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 1rem;\\n  }\\n\\n  /* ステータス表示 */\\n  .status-content {\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    gap: 1rem;\\n  }\\n  \\n  .status-message {\\n    font-weight: 500;\\n    color: hsl(222.2 84% 4.9%);\\n  }\\n  \\n  .progress-indicator {\\n    font-size: 0.875rem;\\n    color: hsl(215.4 16.3% 46.9%);\\n  }\\n\\n  /* サイドバイサイドレイアウト */\\n  .side-by-side-container {\\n    display: flex;\\n    gap: 1.5rem;\\n    margin-bottom: 1.5rem;\\n  }\\n  \\n  :global(.half-width) {\\n    flex: 1;\\n  }\\n  \\n  @media (max-width: 768px) {\\n    .side-by-side-container {\\n      flex-direction: column;\\n    }\\n    \\n    :global(.half-width) {\\n      width: 100%;\\n    }\\n  }\\n\\n  /* デバッグ情報 */\\n  .debug-info {\\n    position: absolute;\\n    top: 1rem;\\n    right: 1rem;\\n    background: hsl(220 13% 91%);\\n    color: hsl(220 13% 46%);\\n    padding: 0.25rem 0.5rem;\\n    border-radius: 4px;\\n    font-size: 0.75rem;\\n    font-family: 'SF Mono', 'Monaco', 'Cascadia Mono', 'Roboto Mono', monospace;\\n    z-index: 100;\\n  }\\n\\n  /* 基音情報 */\\n  .base-note-info {\\n    text-align: center;\\n    padding: 1rem;\\n    background: hsl(210 40% 98%);\\n    border-radius: 6px;\\n    border: 1px solid hsl(214.3 31.8% 91.4%);\\n    font-size: 0.875rem;\\n    color: hsl(215.4 16.3% 46.9%);\\n  }\\n\\n  /* 相対音程情報 */\\n  .relative-pitch-info {\\n    text-align: center;\\n    padding: 1rem;\\n    background: hsl(210 40% 98%);\\n    border-radius: 6px;\\n    border: 1px solid hsl(214.3 31.8% 91.4%);\\n    margin-top: 1rem;\\n  }\\n  \\n  .frequency-display-large {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    gap: 0.25rem;\\n  }\\n  \\n  .large-hz {\\n    font-size: 2rem;\\n    font-weight: 700;\\n    color: hsl(222.2 84% 4.9%);\\n    line-height: 1;\\n  }\\n  \\n  .note-with-cents {\\n    font-size: 0.875rem;\\n    color: hsl(215.4 16.3% 46.9%);\\n    font-weight: 500;\\n  }\\n  \\n  .no-signal {\\n    font-size: 2rem;\\n    font-weight: 700;\\n    color: hsl(215.4 16.3% 46.9%);\\n    line-height: 1;\\n  }\\n  \\n  .pitch-detector-placeholder {\\n    text-align: center;\\n    padding: 2rem;\\n    color: hsl(215.4 16.3% 46.9%);\\n    font-style: italic;\\n  }\\n\\n  /* スケールガイド */\\n  .scale-guide {\\n    display: grid;\\n    grid-template-columns: repeat(4, 1fr);\\n    gap: 0.75rem;\\n    margin-bottom: 1rem;\\n  }\\n  \\n  .scale-item {\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    height: 3rem;\\n    border-radius: 6px;\\n    font-weight: 500;\\n    font-size: 0.875rem;\\n    border: 1px solid hsl(215.4 16.3% 46.9%);\\n    background: hsl(0 0% 100%);\\n    color: hsl(215.4 16.3% 46.9%);\\n    transition: all 0.3s ease;\\n  }\\n  \\n  .scale-item.active {\\n    background: hsl(343.8 79.7% 53.7%) !important;\\n    color: white !important;\\n    border: 2px solid hsla(343.8 79.7% 53.7% / 0.5) !important;\\n    transform: scale(1.2);\\n    font-size: 1.125rem;\\n    font-weight: 700;\\n    animation: pulse 2s infinite;\\n    box-shadow: 0 0 0 2px hsla(343.8 79.7% 53.7% / 0.3) !important;\\n  }\\n  \\n  .scale-item.correct {\\n    background: hsl(142.1 76.2% 36.3%);\\n    color: hsl(210 40% 98%);\\n    border-color: hsl(142.1 76.2% 36.3%);\\n    animation: correctFlash 0.5s ease-out;\\n  }\\n  \\n  .scale-item.incorrect {\\n    background: hsl(0 84.2% 60.2%);\\n    color: hsl(210 40% 98%);\\n    border-color: hsl(0 84.2% 60.2%);\\n    animation: shake 0.5s ease-in-out;\\n  }\\n  \\n  @keyframes pulse {\\n    0%, 100% { opacity: 1; }\\n    50% { opacity: 0.7; }\\n  }\\n  \\n  @keyframes correctFlash {\\n    0% { transform: scale(1); background: hsl(47.9 95.8% 53.1%); }\\n    50% { transform: scale(1.1); background: hsl(142.1 76.2% 36.3%); }\\n    100% { transform: scale(1); background: hsl(142.1 76.2% 36.3%); }\\n  }\\n  \\n  @keyframes shake {\\n    0%, 100% { transform: translateX(0); }\\n    25% { transform: translateX(-5px); }\\n    75% { transform: translateX(5px); }\\n  }\\n  \\n  /* currentクラスは削除（使用していない） */\\n  \\n  .guide-instruction {\\n    text-align: center;\\n    font-size: 0.875rem;\\n    color: hsl(215.4 16.3% 46.9%);\\n    padding: 0.75rem;\\n    background: hsl(210 40% 98%);\\n    border-radius: 6px;\\n  }\\n  \\n  .guide-feedback {\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    gap: 0.5rem;\\n    margin-top: 0.5rem;\\n    font-size: 0.75rem;\\n  }\\n  \\n  .feedback-label {\\n    color: hsl(215.4 16.3% 46.9%);\\n    font-weight: 500;\\n  }\\n  \\n  .feedback-value {\\n    font-weight: 700;\\n    font-family: 'SF Mono', 'Monaco', 'Cascadia Mono', 'Roboto Mono', monospace;\\n    padding: 0.125rem 0.375rem;\\n    border-radius: 4px;\\n    background: hsl(214.3 31.8% 91.4%);\\n    color: hsl(222.2 84% 4.9%);\\n    min-width: 4ch;\\n    text-align: center;\\n  }\\n  \\n  .feedback-value.accurate {\\n    background: hsl(142.1 76.2% 90%);\\n    color: hsl(142.1 76.2% 30%);\\n  }\\n  \\n  .feedback-value.close {\\n    background: hsl(47.9 95.8% 90%);\\n    color: hsl(47.9 95.8% 30%);\\n  }\\n  \\n  .feedback-status {\\n    font-weight: 500;\\n    font-size: 0.75rem;\\n  }\\n  \\n  .feedback-status.success {\\n    color: hsl(142.1 76.2% 36.3%);\\n  }\\n  \\n  .feedback-status.close {\\n    color: hsl(47.9 95.8% 45%);\\n  }\\n\\n  /* 検出表示 */\\n  .detection-display {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 1rem;\\n  }\\n  \\n  .detection-card {\\n    display: inline-flex;\\n    align-items: baseline;\\n    gap: 0.5rem;\\n    padding: 1rem 1.5rem;\\n    background: hsl(0 0% 100%);\\n    border: 1px solid hsl(214.3 31.8% 91.4%);\\n    border-radius: 8px;\\n    width: fit-content;\\n  }\\n\\n  /* PitchDetector表示の最強制スタイリング */\\n  :global(.detected-frequency) {\\n    font-weight: 600 !important;\\n    font-size: 2rem !important;\\n    color: hsl(222.2 84% 4.9%) !important;\\n    font-family: 'SF Mono', 'Monaco', 'Cascadia Mono', 'Roboto Mono', \\n                 'JetBrains Mono', 'Fira Code', 'Consolas', monospace !important;\\n    min-width: 4ch !important;\\n    text-align: right !important;\\n    display: inline-block !important;\\n    font-variant-numeric: tabular-nums !important;\\n    -webkit-font-smoothing: antialiased !important;\\n    -moz-osx-font-smoothing: grayscale !important;\\n  }\\n\\n  :global(.hz-suffix) {\\n    font-weight: 600 !important;\\n    font-size: 2rem !important;\\n    color: hsl(222.2 84% 4.9%) !important;\\n  }\\n\\n  :global(.divider) {\\n    color: hsl(214.3 31.8% 70%) !important;\\n    font-size: 1.5rem !important;\\n    margin: 0 0.25rem !important;\\n    font-weight: 300 !important;\\n  }\\n  \\n  :global(.detected-note) {\\n    font-weight: 600 !important;\\n    font-size: 2rem !important;\\n    color: hsl(215.4 16.3% 46.9%) !important;\\n    font-family: 'SF Mono', 'Monaco', 'Cascadia Mono', 'Roboto Mono', \\n                 'JetBrains Mono', 'Fira Code', 'Consolas', monospace !important;\\n    min-width: 3ch !important;\\n    display: inline-block !important;\\n    text-align: center !important;\\n  }\\n\\n  :global(.volume-bar) {\\n    border-radius: 4px !important;\\n  }\\n  \\n  .detected-info {\\n    display: flex;\\n    align-items: center;\\n    gap: 0.5rem;\\n    font-size: 0.875rem;\\n  }\\n  \\n  .detected-label {\\n    color: hsl(215.4 16.3% 46.9%);\\n  }\\n  \\n  .detected-frequency {\\n    font-weight: 700;\\n    font-size: 1.25rem;\\n    color: hsl(222.2 84% 4.9%);\\n    margin-right: 0.5rem;\\n  }\\n  \\n  .detected-note {\\n    font-weight: 500;\\n    font-size: 0.875rem;\\n    color: hsl(215.4 16.3% 46.9%);\\n    margin-right: 0.25rem;\\n  }\\n  \\n  .pitch-diff {\\n    color: hsl(47.9 95.8% 40%);\\n    font-weight: 500;\\n    margin-left: 0.25rem;\\n  }\\n  \\n  .volume-section {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 0.5rem;\\n  }\\n  \\n  .volume-label {\\n    font-size: 0.875rem;\\n    color: hsl(215.4 16.3% 46.9%);\\n  }\\n  \\n  :global(.modern-volume-bar) {\\n    border-radius: 4px !important;\\n  }\\n\\n  /* 結果表示 */\\n  .results-summary {\\n    display: grid;\\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\\n    gap: 1rem;\\n    margin-bottom: 2rem;\\n  }\\n  \\n  .result-item {\\n    text-align: center;\\n    padding: 1rem;\\n    border-radius: 6px;\\n    background: hsl(0 0% 100%);\\n    border: 1px solid hsl(214.3 31.8% 91.4%);\\n  }\\n  \\n  .result-label {\\n    display: block;\\n    font-size: 0.875rem;\\n    color: hsl(215.4 16.3% 46.9%);\\n    margin-bottom: 0.25rem;\\n  }\\n  \\n  .result-value {\\n    display: block;\\n    font-size: 1.5rem;\\n    font-weight: 700;\\n    color: hsl(222.2 84% 4.9%);\\n  }\\n  \\n  .result-value.success {\\n    color: hsl(142.1 76.2% 36.3%);\\n  }\\n  \\n  /* 詳細結果 */\\n  .detailed-results {\\n    margin-top: 2rem;\\n  }\\n  \\n  .detailed-title {\\n    font-size: 1rem;\\n    font-weight: 600;\\n    color: hsl(222.2 84% 4.9%);\\n    margin-bottom: 1rem;\\n    text-align: center;\\n  }\\n  \\n  .scale-results {\\n    display: flex;\\n    flex-direction: column;\\n    gap: 0.5rem;\\n  }\\n  \\n  .scale-result-item {\\n    display: grid;\\n    grid-template-columns: 1fr auto auto auto;\\n    gap: 1rem;\\n    padding: 0.75rem;\\n    border-radius: 6px;\\n    border: 1px solid hsl(214.3 31.8% 91.4%);\\n    background: hsl(0 0% 100%);\\n    align-items: center;\\n  }\\n  \\n  .scale-result-item.correct {\\n    background: hsl(142.1 76.2% 95%);\\n    border-color: hsl(142.1 76.2% 80%);\\n  }\\n  \\n  .scale-result-item.incorrect {\\n    background: hsl(0 84.2% 95%);\\n    border-color: hsl(0 84.2% 80%);\\n  }\\n  \\n  .scale-name {\\n    font-weight: 600;\\n    color: hsl(222.2 84% 4.9%);\\n  }\\n  \\n  .scale-accuracy {\\n    font-weight: 500;\\n    font-family: 'SF Mono', 'Monaco', 'Cascadia Mono', 'Roboto Mono', monospace;\\n    color: hsl(215.4 16.3% 46.9%);\\n  }\\n  \\n  .scale-cents {\\n    font-weight: 500;\\n    font-family: 'SF Mono', 'Monaco', 'Cascadia Mono', 'Roboto Mono', monospace;\\n    color: hsl(215.4 16.3% 46.9%);\\n    font-size: 0.875rem;\\n  }\\n  \\n  .scale-status {\\n    text-align: center;\\n    font-size: 1.125rem;\\n  }\\n\\n  /* アクションボタン */\\n  .action-buttons {\\n    display: flex;\\n    gap: 0.75rem;\\n    justify-content: center;\\n    flex-wrap: wrap;\\n  }\\n  \\n  /* 再挑戦系ボタンのスタイリング */\\n  :global(.restart-button), :global(.new-base-button) {\\n    min-width: 160px !important;\\n    font-weight: 500 !important;\\n  }\\n  \\n  /* 共通アクションボタン */\\n  .common-actions {\\n    display: flex;\\n    gap: 0.75rem;\\n    justify-content: center;\\n    flex-wrap: wrap;\\n    margin-top: 1.5rem;\\n  }\\n\\n  /* エラー表示 */\\n  .error-content {\\n    text-align: center;\\n    padding: 2rem 1rem;\\n  }\\n  \\n  .error-icon, .loading-icon {\\n    font-size: 3rem;\\n    margin-bottom: 1rem;\\n  }\\n  \\n  .error-content h3 {\\n    font-size: 1.25rem;\\n    font-weight: 600;\\n    color: hsl(222.2 84% 4.9%);\\n    margin-bottom: 0.5rem;\\n  }\\n  \\n  .error-content p {\\n    color: hsl(215.4 16.3% 46.9%);\\n    margin-bottom: 1rem;\\n  }\\n  \\n  .recommendation {\\n    background: hsl(210 40% 98%);\\n    border: 1px solid hsl(214.3 31.8% 91.4%);\\n    border-radius: 6px;\\n    padding: 1rem;\\n    margin: 1rem 0;\\n  }\\n  \\n  .recommendation p {\\n    margin: 0;\\n    font-size: 0.875rem;\\n  }\\n\\n  /* レスポンシブ対応 */\\n  @media (min-width: 768px) {\\n    .scale-guide {\\n      grid-template-columns: repeat(8, 1fr);\\n    }\\n    \\n    .page-title {\\n      font-size: 2.5rem;\\n    }\\n    \\n    .results-summary {\\n      grid-template-columns: repeat(3, 1fr);\\n    }\\n  }\\n  \\n  @media (max-width: 640px) {\\n    .status-content {\\n      flex-direction: column;\\n      gap: 0.5rem;\\n    }\\n    \\n    .action-buttons {\\n      flex-direction: column;\\n    }\\n    \\n    :global(.primary-button), :global(.secondary-button) {\\n      min-width: 100% !important;\\n    }\\n  }\\n\\n  /* マイク警告カード */\\n  :global(.warning-card) {\\n    border: 2px solid #fbbf24 !important;\\n    background: #fef3c7 !important;\\n    margin-bottom: 24px !important;\\n  }\\n\\n  .warning-message {\\n    color: #92400e;\\n    margin-bottom: 12px;\\n  }\\n\\n  .error-list {\\n    color: #dc2626;\\n    margin: 12px 0;\\n    padding-left: 20px;\\n  }\\n\\n  .error-list li {\\n    margin-bottom: 4px;\\n    font-family: monospace;\\n    font-size: 14px;\\n  }\\n\\n  .fix-instruction {\\n    color: #059669;\\n    margin-top: 12px;\\n    padding: 8px;\\n    background: #d1fae5;\\n    border-radius: 4px;\\n    border-left: 4px solid #059669;\\n  }\\n</style>"],"names":[],"mappings":"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"}`
};
const buildVersion = "v1.3.2-FORCE";
const buildTimestamp = "07/27 02:20";
const updateStatus = "🔥 ROSE色修正・音源削除・評価改善";
function scrollToTop() {
  try {
    if ("scrollTo" in window && "behavior" in document.documentElement.style) {
      window.scrollTo({ top: 0, behavior: "smooth" });
    } else {
      window.scrollTo(0, 0);
    }
    if (document.body) {
      document.body.scrollTop = 0;
    }
    if (document.documentElement) {
      document.documentElement.scrollTop = 0;
    }
    const scrollContainers = document.querySelectorAll("[data-scroll-container], .scroll-container, main");
    scrollContainers.forEach((container) => {
      if (container.scrollTo) {
        container.scrollTo(0, 0);
      } else {
        container.scrollTop = 0;
      }
    });
  } catch (error) {
    console.warn("スクロールエラー:", error);
    try {
      window.scroll(0, 0);
    } catch (fallbackError) {
      console.error("スクロール完全失敗:", fallbackError);
    }
  }
}
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$unsubscribe_page;
  validate_store(page, "page");
  $$unsubscribe_page = subscribe(page, (value) => value);
  let trainingPhase = "setup";
  let microphoneState = (() => {
    if (typeof window !== "undefined") {
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.get("from") === "microphone-test") {
        console.log("🎤 [RandomTraining] 早期検出: マイクテストページからの遷移");
        return "granted";
      } else {
        console.log("🎤 [RandomTraining] ダイレクトアクセスを検出");
        return "checking";
      }
    }
    return "checking";
  })();
  let scaleSteps = [
    {
      name: "ド",
      state: "inactive",
      completed: false
    },
    {
      name: "レ",
      state: "inactive",
      completed: false
    },
    {
      name: "ミ",
      state: "inactive",
      completed: false
    },
    {
      name: "ファ",
      state: "inactive",
      completed: false
    },
    {
      name: "ソ",
      state: "inactive",
      completed: false
    },
    {
      name: "ラ",
      state: "inactive",
      completed: false
    },
    {
      name: "シ",
      state: "inactive",
      completed: false
    },
    {
      name: "ド（高）",
      state: "inactive",
      completed: false
    }
  ];
  let detectedNote = "ーー";
  let pitchDetectorComponent = null;
  onDestroy(() => {
    console.log("🔄 [RandomTraining] onDestroy - AudioManagerリソースは保持");
  });
  $$result.css.add(css);
  let $$settled;
  let $$rendered;
  let previous_head = $$result.head;
  do {
    $$settled = true;
    $$result.head = previous_head;
    {
      if (microphoneState === "granted") {
        scrollToTop();
      }
    }
    $$rendered = `${validate_component(PageLayout, "PageLayout").$$render($$result, {}, {}, {
      default: () => {
        return ` <div class="header-section svelte-ds9yw"><h1 class="page-title svelte-ds9yw" data-svelte-h="svelte-1ptm9zr">🎵 ランダム基音トレーニング</h1> <p class="page-description svelte-ds9yw" data-svelte-h="svelte-19nes7">10種類の基音からランダムに選択してドレミファソラシドを練習</p> <div class="debug-info svelte-ds9yw">📱 ${escape(buildVersion)} | ${escape(buildTimestamp)}<br> <small style="font-size: 0.6rem;">${escape(updateStatus)}</small></div></div> ${microphoneState === "granted" ? ` <div style="display: none;">${validate_component(PitchDetector_1, "PitchDetector").$$render(
          $$result,
          {
            isActive: trainingPhase === "guiding",
            className: "pitch-detector-content",
            debugMode: true,
            this: pitchDetectorComponent
          },
          {
            this: ($$value) => {
              pitchDetectorComponent = $$value;
              $$settled = false;
            }
          },
          {}
        )}</div>  ${`  ${``} <div class="side-by-side-container svelte-ds9yw"> ${validate_component(Card, "Card").$$render($$result, { class: "main-card half-width" }, {}, {
          default: () => {
            return `<div class="card-header svelte-ds9yw"><h3 class="section-title svelte-ds9yw" data-svelte-h="svelte-syc53b">🎹 基音再生</h3></div> <div class="card-content svelte-ds9yw">${validate_component(Button, "Button").$$render(
              $$result,
              {
                variant: "primary",
                disabled: trainingPhase === "waiting"
              },
              {},
              {
                default: () => {
                  return `${`${`🎹 ランダム基音再生`}`}`;
                }
              }
            )} ${``}</div>`;
          }
        })}  ${validate_component(Card, "Card").$$render($$result, { class: "main-card half-width" }, {}, {
          default: () => {
            return `<div class="card-header svelte-ds9yw"><h3 class="section-title svelte-ds9yw" data-svelte-h="svelte-1bj87i9">🎙️ リアルタイム音程検出</h3></div> <div class="card-content svelte-ds9yw"> <div class="pitch-detector"><div class="detection-display svelte-ds9yw"><div class="detection-card svelte-ds9yw"><span class="detected-frequency svelte-ds9yw">${escape("---")}</span> <span class="hz-suffix" data-svelte-h="svelte-5uyilv">Hz</span> <span class="divider" data-svelte-h="svelte-1dytxz4">|</span> <span class="detected-note svelte-ds9yw">${escape(detectedNote)}</span></div> ${validate_component(VolumeBar, "VolumeBar").$$render(
              $$result,
              {
                volume: 0,
                className: "volume-bar"
              },
              {},
              {}
            )}</div></div></div>`;
          }
        })}</div>`} ${` ${validate_component(Card, "Card").$$render($$result, { class: "main-card" }, {}, {
          default: () => {
            return `<div class="card-header svelte-ds9yw"><h3 class="section-title svelte-ds9yw" data-svelte-h="svelte-1mor0as">🎵 ドレミ音階ガイド</h3></div> <div class="card-content svelte-ds9yw"><div class="scale-guide svelte-ds9yw">${each(scaleSteps, (step, index) => {
              return `<div class="${"scale-item " + escape(step.state, true) + " svelte-ds9yw"}">${escape(step.name)} </div>`;
            })}</div> ${``}</div>`;
          }
        })}`}  ${``}  ${``}` : ` ${validate_component(Card, "Card").$$render($$result, { class: "error-card" }, {}, {
          default: () => {
            return `<div class="error-content svelte-ds9yw"><div class="error-icon svelte-ds9yw" data-svelte-h="svelte-15rbx8n">🎤</div> <h3 class="svelte-ds9yw" data-svelte-h="svelte-17kvze2">マイクテストが必要です</h3> <p class="svelte-ds9yw" data-svelte-h="svelte-12s9olt">ランダム基音トレーニングを開始する前に、マイクテストページで音声入力の確認をお願いします。</p> <div class="recommendation svelte-ds9yw"><p class="svelte-ds9yw">このページは<strong data-svelte-h="svelte-1n3qsr6">マイクテスト完了後</strong>にご利用いただけます。</p> <p class="svelte-ds9yw" data-svelte-h="svelte-v8nd09">まずはマイクテストページで音声確認を行ってください。</p></div> <div class="action-buttons svelte-ds9yw">${validate_component(Button, "Button").$$render($$result, { variant: "primary" }, {}, {
              default: () => {
                return `🎤 マイクテストページへ移動`;
              }
            })} ${validate_component(Button, "Button").$$render($$result, { variant: "secondary" }, {}, {
              default: () => {
                return `🎙️ 直接マイク許可を取得`;
              }
            })} ${validate_component(Button, "Button").$$render($$result, { variant: "secondary" }, {}, {
              default: () => {
                return `🏠 ホームに戻る`;
              }
            })}</div></div>`;
          }
        })}`}`;
      }
    })}`;
  } while (!$$settled);
  $$unsubscribe_page();
  return $$rendered;
});
export {
  Page as default
};
