import { c as create_ssr_component, o as onDestroy, e as escape, f as each } from "../../../chunks/ssr.js";
const css = {
  code: ".simple-test.svelte-63wsq3.svelte-63wsq3{max-width:800px;margin:0 auto;padding:20px;font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif}.header.svelte-63wsq3.svelte-63wsq3{text-align:center;margin-bottom:30px}.header.svelte-63wsq3 h1.svelte-63wsq3{font-size:2rem;color:#1f2937;margin:0 0 10px 0}.header.svelte-63wsq3 p.svelte-63wsq3{font-size:1rem;color:#6b7280;margin:0}.test-controls.svelte-63wsq3.svelte-63wsq3{text-align:center;margin-bottom:30px}.test-button.svelte-63wsq3.svelte-63wsq3{background-color:#2563eb;color:white;border:none;padding:12px 24px;font-size:1rem;font-weight:600;border-radius:6px;cursor:pointer;transition:background-color 0.2s}.test-button.svelte-63wsq3.svelte-63wsq3:hover{background-color:#1d4ed8}.status.svelte-63wsq3.svelte-63wsq3{padding:12px 24px;border-radius:6px;font-weight:600;margin-bottom:10px}.status.svelte-63wsq3.svelte-63wsq3:not(.error){background-color:#dcfce7;color:#166534;border:1px solid #86efac}.status.error.svelte-63wsq3.svelte-63wsq3{background-color:#fee2e2;color:#991b1b;border:1px solid #fca5a5}.results.svelte-63wsq3.svelte-63wsq3{display:grid;grid-template-columns:1fr 1fr;gap:30px;margin-bottom:30px;padding:20px;background-color:#f9fafb;border-radius:8px;border:1px solid #e5e7eb}.volume-display.svelte-63wsq3 h3.svelte-63wsq3,.frequency-display.svelte-63wsq3 h3.svelte-63wsq3{font-size:1.2rem;color:#1f2937;margin:0 0 15px 0}.volume-bar-container.svelte-63wsq3.svelte-63wsq3{width:100%;height:20px;background-color:#e5e7eb;border-radius:10px;overflow:hidden;margin-bottom:10px}.volume-bar.svelte-63wsq3.svelte-63wsq3{height:100%;background-color:#10b981;border-radius:10px;transition:width 0.1s ease}.volume-text.svelte-63wsq3.svelte-63wsq3{text-align:center;font-weight:600;color:#374151}.frequency-text.svelte-63wsq3.svelte-63wsq3{font-size:2rem;font-weight:700;color:#1f2937;text-align:center;margin-bottom:5px}.note-text.svelte-63wsq3.svelte-63wsq3{font-size:1.2rem;font-weight:600;color:#6b7280;text-align:center}.logs.svelte-63wsq3.svelte-63wsq3{margin-top:30px}.logs.svelte-63wsq3 h3.svelte-63wsq3{font-size:1.2rem;color:#1f2937;margin:0 0 15px 0}.log-container.svelte-63wsq3.svelte-63wsq3{background-color:#1f2937;color:#f9fafb;padding:15px;border-radius:6px;font-family:'Monaco', 'Menlo', 'Ubuntu Mono', monospace;font-size:0.875rem;max-height:300px;overflow-y:auto}.log-entry.svelte-63wsq3.svelte-63wsq3{margin-bottom:5px;line-height:1.4}.log-entry.svelte-63wsq3.svelte-63wsq3:last-child{margin-bottom:0}@media(max-width: 768px){.results.svelte-63wsq3.svelte-63wsq3{grid-template-columns:1fr;gap:20px}}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n  import { onMount, onDestroy } from 'svelte';\\n  \\n  // 最小限の状態管理\\n  let micPermission = 'initial'; // 'initial' | 'pending' | 'granted' | 'denied' | 'error'\\n  let isListening = false;\\n  let currentVolume = 0;\\n  let currentFrequency = 0;\\n  let currentNote = '';\\n  \\n  // Web Audio API変数\\n  let audioContext = null;\\n  let mediaStream = null;\\n  let analyser = null;\\n  let animationFrame = null;\\n  \\n  // ログ表示用\\n  let logs = [];\\n  function addLog(message) {\\n    const timestamp = new Date().toLocaleTimeString();\\n    logs = [\`[\${timestamp}] \${message}\`, ...logs.slice(0, 19)]; // 最新20件のみ保持\\n  }\\n  \\n  // マイク許可リクエスト\\n  async function requestMicrophone() {\\n    addLog('マイク許可リクエスト開始');\\n    micPermission = 'pending';\\n    \\n    try {\\n      // 最もシンプルな設定でマイクアクセス\\n      mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });\\n      addLog('マイク許可取得成功');\\n      micPermission = 'granted';\\n      \\n      // AudioContextをユーザーアクション内で作成\\n      audioContext = new (window.AudioContext || window.webkitAudioContext)();\\n      addLog(\`AudioContext作成完了, state: \${audioContext.state}\`);\\n      \\n      // AudioContextがsuspendedの場合は再開\\n      if (audioContext.state === 'suspended') {\\n        await audioContext.resume();\\n        addLog(\`AudioContext再開完了, state: \${audioContext.state}\`);\\n      }\\n      \\n      // アナライザー設定（最適化）\\n      analyser = audioContext.createAnalyser();\\n      analyser.fftSize = 2048;\\n      analyser.smoothingTimeConstant = 0.8; // より安定した検出のため\\n      analyser.minDecibels = -90;\\n      analyser.maxDecibels = -10;\\n      \\n      const source = audioContext.createMediaStreamSource(mediaStream);\\n      source.connect(analyser);\\n      addLog('アナライザー接続完了');\\n      \\n      // MediaStreamTrackの状態監視\\n      mediaStream.getTracks().forEach((track, index) => {\\n        addLog(\`Track \${index}: \${track.kind}, \${track.label}, state: \${track.readyState}\`);\\n        \\n        track.addEventListener('ended', () => {\\n          addLog(\`Track \${index} ended\`);\\n        });\\n        \\n        track.addEventListener('mute', () => {\\n          addLog(\`Track \${index} muted\`);\\n        });\\n        \\n        track.addEventListener('unmute', () => {\\n          addLog(\`Track \${index} unmuted\`);\\n        });\\n      });\\n      \\n      isListening = true;\\n      addLog('リアルタイム解析開始');\\n      analyzeAudio();\\n      \\n    } catch (error) {\\n      addLog(\`マイクアクセスエラー: \${error.name} - \${error.message}\`);\\n      micPermission = 'denied';\\n    }\\n  }\\n  \\n  // 音声解析ループ（最小限）\\n  function analyzeAudio() {\\n    if (!isListening || !analyser) {\\n      addLog('解析停止');\\n      return;\\n    }\\n    \\n    const bufferLength = analyser.frequencyBinCount;\\n    const dataArray = new Uint8Array(bufferLength);\\n    \\n    // 周波数データ取得\\n    analyser.getByteFrequencyData(dataArray);\\n    \\n    // RMS音量計算（マイクレベル最適化）\\n    let sum = 0;\\n    for (let i = 0; i < dataArray.length; i++) {\\n      sum += dataArray[i] * dataArray[i];\\n    }\\n    const rms = Math.sqrt(sum / dataArray.length);\\n    // マイク感度を調整（より敏感に反応するよう調整）\\n    currentVolume = Math.min(100, (rms / 64) * 100); // 64に変更でより敏感に\\n    \\n    // 時間領域データ取得\\n    const timeDataArray = new Float32Array(analyser.fftSize);\\n    analyser.getFloatTimeDomainData(timeDataArray);\\n    \\n    // シンプルな基本周波数検出\\n    const frequency = detectPitch(timeDataArray, audioContext.sampleRate);\\n    if (frequency > 80 && frequency < 800) {\\n      currentFrequency = frequency;\\n      currentNote = frequencyToNote(frequency);\\n    } else {\\n      currentFrequency = 0;\\n      currentNote = '';\\n    }\\n    \\n    animationFrame = requestAnimationFrame(analyzeAudio);\\n  }\\n  \\n  // シンプルな音程検出（最適化済み）\\n  function detectPitch(buffer, sampleRate) {\\n    // 音量チェック（より敏感に調整）\\n    let rms = 0;\\n    for (let i = 0; i < buffer.length; i++) {\\n      rms += buffer[i] * buffer[i];\\n    }\\n    rms = Math.sqrt(rms / buffer.length);\\n    if (rms < 0.005) return 0; // 閾値を下げてより敏感に\\n    \\n    // 自己相関関数（人声に最適化した範囲）\\n    const minPeriod = Math.floor(sampleRate / 800); // 最高800Hz\\n    const maxPeriod = Math.floor(sampleRate / 80);  // 最低80Hz\\n    \\n    let bestCorrelation = 0;\\n    let bestPeriod = 0;\\n    \\n    for (let period = minPeriod; period <= maxPeriod; period++) {\\n      let correlation = 0;\\n      let normalizer = 0;\\n      \\n      for (let i = 0; i < buffer.length - period; i++) {\\n        correlation += buffer[i] * buffer[i + period];\\n        normalizer += buffer[i] * buffer[i];\\n      }\\n      \\n      if (normalizer > 0) {\\n        correlation = correlation / Math.sqrt(normalizer);\\n        if (correlation > bestCorrelation) {\\n          bestCorrelation = correlation;\\n          bestPeriod = period;\\n        }\\n      }\\n    }\\n    \\n    // 信頼度閾値を下げてより検出しやすく\\n    return bestCorrelation > 0.25 ? sampleRate / bestPeriod : 0;\\n  }\\n  \\n  // 周波数から音名へ変換\\n  function frequencyToNote(frequency) {\\n    const A4 = 440;\\n    const semitonesFromA4 = Math.round(12 * Math.log2(frequency / A4));\\n    const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\\n    const noteIndex = ((semitonesFromA4 + 9) % 12 + 12) % 12;\\n    const octave = Math.floor((semitonesFromA4 + 9) / 12) + 4;\\n    const note = noteNames[noteIndex];\\n    const noteNamesJa = {\\n      'C': 'ド', 'C#': 'ド#', 'D': 'レ', 'D#': 'レ#', 'E': 'ミ', 'F': 'ファ',\\n      'F#': 'ファ#', 'G': 'ソ', 'G#': 'ソ#', 'A': 'ラ', 'A#': 'ラ#', 'B': 'シ'\\n    };\\n    return \`\${note}\${octave}（\${noteNamesJa[note]}\${octave}）\`;\\n  }\\n  \\n  // リスニング停止\\n  function stopListening() {\\n    isListening = false;\\n    addLog('リスニング停止開始');\\n    \\n    if (animationFrame) {\\n      cancelAnimationFrame(animationFrame);\\n      animationFrame = null;\\n    }\\n    \\n    if (mediaStream) {\\n      mediaStream.getTracks().forEach(track => track.stop());\\n      mediaStream = null;\\n      addLog('MediaStream停止完了');\\n    }\\n    \\n    if (audioContext && audioContext.state !== 'closed') {\\n      audioContext.close();\\n      audioContext = null;\\n      addLog('AudioContext終了完了');\\n    }\\n    \\n    analyser = null;\\n  }\\n  \\n  // ページ離脱時のクリーンアップ\\n  onDestroy(() => {\\n    stopListening();\\n  });\\n<\/script>\\n\\n<svelte:head>\\n  <title>シンプルマイクテスト - 相対音感トレーニング</title>\\n</svelte:head>\\n\\n<div class=\\"simple-test\\">\\n  <div class=\\"header\\">\\n    <h1>シンプルマイクテスト</h1>\\n    <p>自作コンポーネント不使用・最小限実装のテストページ</p>\\n  </div>\\n  \\n  <div class=\\"test-controls\\">\\n    {#if micPermission === 'initial'}\\n      <button class=\\"test-button\\" on:click={requestMicrophone}>\\n        🎤 マイクテスト開始\\n      </button>\\n    {:else if micPermission === 'pending'}\\n      <div class=\\"status\\">⏳ マイク許可を確認中...</div>\\n    {:else if micPermission === 'granted'}\\n      <div class=\\"status\\">✅ マイクアクセス許可済み</div>\\n      {#if isListening}\\n        <button class=\\"test-button\\" on:click={stopListening}>\\n          ⏹️ テスト停止\\n        </button>\\n      {/if}\\n    {:else if micPermission === 'denied'}\\n      <div class=\\"status error\\">❌ マイクアクセスが拒否されました</div>\\n      <button class=\\"test-button\\" on:click={requestMicrophone}>\\n        再試行\\n      </button>\\n    {/if}\\n  </div>\\n  \\n  {#if isListening}\\n    <div class=\\"results\\">\\n      <div class=\\"volume-display\\">\\n        <h3>音量レベル</h3>\\n        <div class=\\"volume-bar-container\\">\\n          <div class=\\"volume-bar\\" style=\\"width: {currentVolume}%\\"></div>\\n        </div>\\n        <div class=\\"volume-text\\">{currentVolume.toFixed(1)}%</div>\\n      </div>\\n      \\n      <div class=\\"frequency-display\\">\\n        <h3>周波数検出</h3>\\n        <div class=\\"frequency-text\\">{currentFrequency.toFixed(1)} Hz</div>\\n        <div class=\\"note-text\\">{currentNote}</div>\\n      </div>\\n    </div>\\n  {/if}\\n  \\n  <div class=\\"logs\\">\\n    <h3>ログ（最新20件）</h3>\\n    <div class=\\"log-container\\">\\n      {#each logs as log}\\n        <div class=\\"log-entry\\">{log}</div>\\n      {/each}\\n    </div>\\n  </div>\\n</div>\\n\\n<style>\\n  .simple-test {\\n    max-width: 800px;\\n    margin: 0 auto;\\n    padding: 20px;\\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\\n  }\\n  \\n  .header {\\n    text-align: center;\\n    margin-bottom: 30px;\\n  }\\n  \\n  .header h1 {\\n    font-size: 2rem;\\n    color: #1f2937;\\n    margin: 0 0 10px 0;\\n  }\\n  \\n  .header p {\\n    font-size: 1rem;\\n    color: #6b7280;\\n    margin: 0;\\n  }\\n  \\n  .test-controls {\\n    text-align: center;\\n    margin-bottom: 30px;\\n  }\\n  \\n  .test-button {\\n    background-color: #2563eb;\\n    color: white;\\n    border: none;\\n    padding: 12px 24px;\\n    font-size: 1rem;\\n    font-weight: 600;\\n    border-radius: 6px;\\n    cursor: pointer;\\n    transition: background-color 0.2s;\\n  }\\n  \\n  .test-button:hover {\\n    background-color: #1d4ed8;\\n  }\\n  \\n  .status {\\n    padding: 12px 24px;\\n    border-radius: 6px;\\n    font-weight: 600;\\n    margin-bottom: 10px;\\n  }\\n  \\n  .status:not(.error) {\\n    background-color: #dcfce7;\\n    color: #166534;\\n    border: 1px solid #86efac;\\n  }\\n  \\n  .status.error {\\n    background-color: #fee2e2;\\n    color: #991b1b;\\n    border: 1px solid #fca5a5;\\n  }\\n  \\n  .results {\\n    display: grid;\\n    grid-template-columns: 1fr 1fr;\\n    gap: 30px;\\n    margin-bottom: 30px;\\n    padding: 20px;\\n    background-color: #f9fafb;\\n    border-radius: 8px;\\n    border: 1px solid #e5e7eb;\\n  }\\n  \\n  .volume-display h3,\\n  .frequency-display h3 {\\n    font-size: 1.2rem;\\n    color: #1f2937;\\n    margin: 0 0 15px 0;\\n  }\\n  \\n  .volume-bar-container {\\n    width: 100%;\\n    height: 20px;\\n    background-color: #e5e7eb;\\n    border-radius: 10px;\\n    overflow: hidden;\\n    margin-bottom: 10px;\\n  }\\n  \\n  .volume-bar {\\n    height: 100%;\\n    background-color: #10b981;\\n    border-radius: 10px;\\n    transition: width 0.1s ease;\\n  }\\n  \\n  .volume-text {\\n    text-align: center;\\n    font-weight: 600;\\n    color: #374151;\\n  }\\n  \\n  .frequency-text {\\n    font-size: 2rem;\\n    font-weight: 700;\\n    color: #1f2937;\\n    text-align: center;\\n    margin-bottom: 5px;\\n  }\\n  \\n  .note-text {\\n    font-size: 1.2rem;\\n    font-weight: 600;\\n    color: #6b7280;\\n    text-align: center;\\n  }\\n  \\n  .logs {\\n    margin-top: 30px;\\n  }\\n  \\n  .logs h3 {\\n    font-size: 1.2rem;\\n    color: #1f2937;\\n    margin: 0 0 15px 0;\\n  }\\n  \\n  .log-container {\\n    background-color: #1f2937;\\n    color: #f9fafb;\\n    padding: 15px;\\n    border-radius: 6px;\\n    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\\n    font-size: 0.875rem;\\n    max-height: 300px;\\n    overflow-y: auto;\\n  }\\n  \\n  .log-entry {\\n    margin-bottom: 5px;\\n    line-height: 1.4;\\n  }\\n  \\n  .log-entry:last-child {\\n    margin-bottom: 0;\\n  }\\n  \\n  @media (max-width: 768px) {\\n    .results {\\n      grid-template-columns: 1fr;\\n      gap: 20px;\\n    }\\n  }\\n</style>"],"names":[],"mappings":"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"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let isListening = false;
  let currentVolume = 0;
  let currentFrequency = 0;
  let currentNote = "";
  let logs = [];
  function addLog(message) {
    const timestamp = (/* @__PURE__ */ new Date()).toLocaleTimeString();
    logs = [`[${timestamp}] ${message}`, ...logs.slice(0, 19)];
  }
  function stopListening() {
    isListening = false;
    addLog("リスニング停止開始");
  }
  onDestroy(() => {
    stopListening();
  });
  $$result.css.add(css);
  return `${$$result.head += `<!-- HEAD_svelte-tme954_START -->${$$result.title = `<title>シンプルマイクテスト - 相対音感トレーニング</title>`, ""}<!-- HEAD_svelte-tme954_END -->`, ""} <div class="simple-test svelte-63wsq3"><div class="header svelte-63wsq3"><h1 class="svelte-63wsq3" data-svelte-h="svelte-ruw81a">シンプルマイクテスト</h1> <p class="svelte-63wsq3" data-svelte-h="svelte-n2w7hi">自作コンポーネント不使用・最小限実装のテストページ</p></div> <div class="test-controls svelte-63wsq3">${`<button class="test-button svelte-63wsq3" data-svelte-h="svelte-1f5wvo1">🎤 マイクテスト開始</button>`}</div> ${isListening ? `<div class="results svelte-63wsq3"><div class="volume-display svelte-63wsq3"><h3 class="svelte-63wsq3" data-svelte-h="svelte-etucpw">音量レベル</h3> <div class="volume-bar-container svelte-63wsq3"><div class="volume-bar svelte-63wsq3" style="${"width: " + escape(currentVolume, true) + "%"}"></div></div> <div class="volume-text svelte-63wsq3">${escape(currentVolume.toFixed(1))}%</div></div> <div class="frequency-display svelte-63wsq3"><h3 class="svelte-63wsq3" data-svelte-h="svelte-1yfwvfq">周波数検出</h3> <div class="frequency-text svelte-63wsq3">${escape(currentFrequency.toFixed(1))} Hz</div> <div class="note-text svelte-63wsq3">${escape(currentNote)}</div></div></div>` : ``} <div class="logs svelte-63wsq3"><h3 class="svelte-63wsq3" data-svelte-h="svelte-1w4c8w2">ログ（最新20件）</h3> <div class="log-container svelte-63wsq3">${each(logs, (log) => {
    return `<div class="log-entry svelte-63wsq3">${escape(log)}</div>`;
  })}</div></div> </div>`;
});
export {
  Page as default
};
