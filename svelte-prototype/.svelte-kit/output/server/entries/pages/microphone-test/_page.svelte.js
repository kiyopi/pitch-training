import { c as create_ssr_component, b as validate_store, d as subscribe, o as onDestroy, v as validate_component, e as escape } from "../../../chunks/ssr.js";
import { p as page } from "../../../chunks/stores.js";
import { P as PageLayout, C as Card } from "../../../chunks/PageLayout.js";
const css = {
  code: ".microphone-test.svelte-1byxpqw{max-width:800px;margin:0 auto;display:flex;flex-direction:column;gap:var(--space-6)}.header.svelte-1byxpqw{text-align:center}.mic-test-header.svelte-1byxpqw{display:flex;align-items:center;justify-content:center;gap:var(--space-4);margin-bottom:var(--space-4)}.mic-icon.svelte-1byxpqw{width:64px;height:64px;border-radius:50%;background-color:#dbeafe;color:#2563eb;display:flex;align-items:center;justify-content:center;flex-shrink:0}.mic-test-title.svelte-1byxpqw{font-size:var(--text-2xl);font-weight:700;color:var(--color-gray-900);margin:0 0 var(--space-2) 0}.mic-test-description.svelte-1byxpqw{font-size:var(--text-base);color:var(--color-gray-600);margin:0}.training-mode-info.svelte-1byxpqw{margin-bottom:var(--space-6)}.training-mode-content.svelte-1byxpqw{text-align:center}.instructions-title.svelte-1byxpqw{font-size:var(--text-lg);font-weight:600;color:var(--color-gray-900);margin:0 0 var(--space-2) 0}.instructions-description.svelte-1byxpqw{font-size:var(--text-sm);color:var(--color-gray-600);margin:0}.status-text.svelte-1byxpqw{font-size:var(--text-lg);font-weight:600;color:var(--color-gray-900);margin:var(--space-6) 0;text-align:center}.status-text.voice-instruction.svelte-1byxpqw{color:#2563eb;font-size:var(--text-xl);font-weight:700}.ready-title.svelte-1byxpqw{font-size:var(--text-xl);font-weight:600;color:#2563eb;margin:var(--space-4) 0 var(--space-2) 0;text-align:center}.ready-description.svelte-1byxpqw{font-size:var(--text-sm);color:var(--color-gray-600);margin:0 0 var(--space-6) 0;text-align:center}.mic-test-button-area.svelte-1byxpqw,.training-start-button-area.svelte-1byxpqw{margin-top:var(--space-6);display:flex;justify-content:center}.mic-test-button.svelte-1byxpqw{max-width:300px;width:100%;padding:12px 16px;border:none;border-radius:8px;font-size:14px;font-weight:500;cursor:pointer;transition:background-color 0.2s ease-in-out;display:flex;align-items:center;justify-content:center;gap:8px}.mic-test-button.start.svelte-1byxpqw{background-color:#2563eb;color:white}.mic-test-button.start.svelte-1byxpqw:hover{background-color:#1d4ed8}.mic-test-button.retry.svelte-1byxpqw{background-color:#dc2626;color:white}.mic-test-button.retry.svelte-1byxpqw:hover{background-color:#b91c1c}.training-start-button.svelte-1byxpqw{max-width:300px;width:100%;padding:12px 16px;border:none;border-radius:8px;font-size:14px;font-weight:500;cursor:pointer;transition:background-color 0.2s ease-in-out;display:flex;align-items:center;justify-content:center;gap:8px;background-color:#059669;color:white}.training-start-button.enabled.svelte-1byxpqw:hover{background-color:#047857}.mic-test-content.svelte-1byxpqw{text-align:center}.realtime-display.svelte-1byxpqw{display:grid;gap:var(--space-6);margin-bottom:var(--space-6)}.display-title.svelte-1byxpqw{font-size:var(--text-lg);font-weight:600;color:var(--color-gray-900);margin:0 0 var(--space-3) 0}.volume-section.svelte-1byxpqw{display:flex;flex-direction:column;justify-content:center;min-height:120px}.volume-bar-container.svelte-1byxpqw{width:100%;height:20px;background-color:#e5e7eb;border-radius:10px;overflow:hidden;margin-bottom:var(--space-2)}.volume-bar.svelte-1byxpqw{height:100%;background-color:#10b981;border-radius:10px;transition:width 0.1s ease}.volume-text.svelte-1byxpqw{text-align:center;font-weight:600;color:var(--color-gray-700);margin-bottom:var(--space-2)}.frequency-display.svelte-1byxpqw{margin-bottom:var(--space-2)}.frequency-value.svelte-1byxpqw{font-size:var(--text-2xl);font-weight:700;color:var(--color-gray-900);margin-bottom:var(--space-1)}.note-value.svelte-1byxpqw{font-size:var(--text-lg);font-weight:600;color:var(--color-gray-700)}.volume-status.svelte-1byxpqw,.frequency-status.svelte-1byxpqw{text-align:center;min-height:24px;display:flex;align-items:center;justify-content:center}.status-pending.svelte-1byxpqw{color:var(--color-gray-600)}@media(min-width: 768px){.mic-test-header.svelte-1byxpqw{flex-direction:row;text-align:left}.realtime-display.svelte-1byxpqw{grid-template-columns:1fr 1fr}}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n  import { onMount, onDestroy } from 'svelte';\\n  import { page } from '$app/stores';\\n  import Card from '$lib/components/Card.svelte';\\n  import Button from '$lib/components/Button.svelte';\\n  import PageLayout from '$lib/components/PageLayout.svelte';\\n  \\n  // URL パラメータから mode を取得\\n  let mode = 'random';\\n  \\n  onMount(() => {\\n    if ($page.url.searchParams.has('mode')) {\\n      mode = $page.url.searchParams.get('mode') || 'random';\\n    }\\n  });\\n\\n  // マイクテスト状態管理（シンプル版）\\n  let micPermission = 'initial'; // 'initial' | 'pending' | 'granted' | 'denied'\\n  let isListening = false;\\n  let volumeDetected = false;\\n  let frequencyDetected = false;\\n  let audioConfirmationComplete = false;\\n  let currentVolume = 0;\\n  let currentFrequency = 0;\\n  let currentNote = '';\\n  \\n  // Web Audio API変数\\n  let audioContext = null;\\n  let mediaStream = null;\\n  let analyser = null;\\n  let animationFrame = null;\\n\\n  // トレーニングモード設定\\n  const trainingModes = {\\n    random: {\\n      name: 'ランダム基音モード',\\n      description: '10種類の基音からランダムに選択してトレーニング',\\n      color: 'green',\\n      path: './training/random'\\n    },\\n    continuous: {\\n      name: '連続チャレンジモード',\\n      description: '選択した回数だけ連続で実行し、総合評価を確認',\\n      color: 'orange',\\n      path: './training/continuous'\\n    },\\n    chromatic: {\\n      name: '12音階モード',\\n      description: 'クロマチックスケールの上行・下行で完全制覇',\\n      color: 'purple',\\n      path: './training/chromatic'\\n    }\\n  };\\n\\n  const selectedMode = trainingModes[mode] || trainingModes.random;\\n  \\n  // ボタン状態の計算\\n  $: {\\n    if (volumeDetected && frequencyDetected && !audioConfirmationComplete) {\\n      // 音声確認完了の即座設定\\n      audioConfirmationComplete = true;\\n    }\\n  }\\n  \\n  // マイク許可リクエスト（シンプル版）\\n  async function requestMicrophone() {\\n    micPermission = 'pending';\\n    \\n    try {\\n      // シンプルな設定でマイクアクセス\\n      mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });\\n      micPermission = 'granted';\\n      \\n      // AudioContextをユーザーアクション内で作成\\n      audioContext = new (window.AudioContext || window.webkitAudioContext)();\\n      \\n      // AudioContextがsuspendedの場合は再開\\n      if (audioContext.state === 'suspended') {\\n        await audioContext.resume();\\n      }\\n      \\n      // アナライザー設定（最適化）\\n      analyser = audioContext.createAnalyser();\\n      analyser.fftSize = 2048;\\n      analyser.smoothingTimeConstant = 0.8;\\n      analyser.minDecibels = -90;\\n      analyser.maxDecibels = -10;\\n      \\n      const source = audioContext.createMediaStreamSource(mediaStream);\\n      source.connect(analyser);\\n      \\n      isListening = true;\\n      analyzeAudio();\\n      \\n    } catch (error) {\\n      micPermission = 'denied';\\n    }\\n  }\\n  \\n  // 音声解析ループ（最適化済み）\\n  function analyzeAudio() {\\n    if (!isListening || !analyser) return;\\n    \\n    const bufferLength = analyser.frequencyBinCount;\\n    const dataArray = new Uint8Array(bufferLength);\\n    \\n    // 周波数データ取得\\n    analyser.getByteFrequencyData(dataArray);\\n    \\n    // RMS音量計算（マイクレベル最適化）\\n    let sum = 0;\\n    for (let i = 0; i < dataArray.length; i++) {\\n      sum += dataArray[i] * dataArray[i];\\n    }\\n    const rms = Math.sqrt(sum / dataArray.length);\\n    currentVolume = Math.min(100, (rms / 64) * 100);\\n    \\n    if (currentVolume > 15) {\\n      volumeDetected = true;\\n    }\\n    \\n    // 時間領域データ取得\\n    const timeDataArray = new Float32Array(analyser.fftSize);\\n    analyser.getFloatTimeDomainData(timeDataArray);\\n    \\n    // 音程検出\\n    const frequency = detectPitch(timeDataArray, audioContext.sampleRate);\\n    if (frequency > 80 && frequency < 800) {\\n      currentFrequency = frequency;\\n      currentNote = frequencyToNote(frequency);\\n      frequencyDetected = true;\\n    } else {\\n      currentFrequency = 0;\\n      currentNote = '';\\n    }\\n    \\n    animationFrame = requestAnimationFrame(analyzeAudio);\\n  }\\n  \\n  // シンプルな音程検出（最適化済み）\\n  function detectPitch(buffer, sampleRate) {\\n    // 音量チェック\\n    let rms = 0;\\n    for (let i = 0; i < buffer.length; i++) {\\n      rms += buffer[i] * buffer[i];\\n    }\\n    rms = Math.sqrt(rms / buffer.length);\\n    if (rms < 0.005) return 0;\\n    \\n    // 自己相関関数\\n    const minPeriod = Math.floor(sampleRate / 800);\\n    const maxPeriod = Math.floor(sampleRate / 80);\\n    \\n    let bestCorrelation = 0;\\n    let bestPeriod = 0;\\n    \\n    for (let period = minPeriod; period <= maxPeriod; period++) {\\n      let correlation = 0;\\n      let normalizer = 0;\\n      \\n      for (let i = 0; i < buffer.length - period; i++) {\\n        correlation += buffer[i] * buffer[i + period];\\n        normalizer += buffer[i] * buffer[i];\\n      }\\n      \\n      if (normalizer > 0) {\\n        correlation = correlation / Math.sqrt(normalizer);\\n        if (correlation > bestCorrelation) {\\n          bestCorrelation = correlation;\\n          bestPeriod = period;\\n        }\\n      }\\n    }\\n    \\n    return bestCorrelation > 0.25 ? sampleRate / bestPeriod : 0;\\n  }\\n  \\n  // 周波数から音名へ変換\\n  function frequencyToNote(frequency) {\\n    const A4 = 440;\\n    const semitonesFromA4 = Math.round(12 * Math.log2(frequency / A4));\\n    const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\\n    const noteIndex = ((semitonesFromA4 + 9) % 12 + 12) % 12;\\n    const octave = Math.floor((semitonesFromA4 + 9) / 12) + 4;\\n    const note = noteNames[noteIndex];\\n    const noteNamesJa = {\\n      'C': 'ド', 'C#': 'ド#', 'D': 'レ', 'D#': 'レ#', 'E': 'ミ', 'F': 'ファ',\\n      'F#': 'ファ#', 'G': 'ソ', 'G#': 'ソ#', 'A': 'ラ', 'A#': 'ラ#', 'B': 'シ'\\n    };\\n    return \`\${note}\${octave}（\${noteNamesJa[note]}\${octave}）\`;\\n  }\\n  \\n  // リスニング停止\\n  function stopListening() {\\n    isListening = false;\\n    \\n    if (animationFrame) {\\n      cancelAnimationFrame(animationFrame);\\n      animationFrame = null;\\n    }\\n    \\n    if (mediaStream) {\\n      mediaStream.getTracks().forEach(track => track.stop());\\n      mediaStream = null;\\n    }\\n    \\n    if (audioContext && audioContext.state !== 'closed') {\\n      audioContext.close();\\n      audioContext = null;\\n    }\\n    \\n    analyser = null;\\n  }\\n  \\n  // ページ離脱時のクリーンアップ\\n  onDestroy(() => {\\n    stopListening();\\n  });\\n<\/script>\\n\\n<svelte:head>\\n  <title>マイクテスト - 相対音感トレーニング</title>\\n</svelte:head>\\n\\n<PageLayout showBackButton={true}>\\n  <div class=\\"microphone-test\\">\\n    <!-- ヘッダー -->\\n    <div class=\\"header\\">\\n      <div class=\\"mic-test-header\\">\\n        <div class=\\"mic-icon\\">\\n          <svg width=\\"48\\" height=\\"48\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\">\\n            <path d=\\"M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z\\"/>\\n            <path d=\\"M19 10v2a7 7 0 0 1-14 0v-2\\"/>\\n            <line x1=\\"12\\" x2=\\"12\\" y1=\\"19\\" y2=\\"22\\"/>\\n            <line x1=\\"8\\" x2=\\"16\\" y1=\\"22\\" y2=\\"22\\"/>\\n          </svg>\\n        </div>\\n        <div>\\n          <h1 class=\\"mic-test-title\\">マイクテスト</h1>\\n          <p class=\\"mic-test-description\\">音感トレーニングを始める前に、マイクの動作を確認します</p>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <!-- トレーニングモード情報 -->\\n    <div class=\\"training-mode-info\\">\\n      <Card variant=\\"default\\" padding=\\"lg\\">\\n        <div class=\\"training-mode-content\\">\\n          {#if !audioConfirmationComplete}\\n            <!-- マイクテスト段階の表示 -->\\n            {#if micPermission === 'granted' && isListening && (!volumeDetected || !frequencyDetected)}\\n              <!-- 音声確認中は説明非表示 -->\\n              <p class=\\"status-text voice-instruction\\">「ドー」と発声してください</p>\\n              \\n              <!-- ボイス確認中のサブ情報 -->\\n              <h3 class=\\"ready-title\\">マイク準備完了</h3>\\n              <p class=\\"ready-description\\">トレーニング開始ボタンを押してランダム基音モードへ進んでください</p>\\n            {:else}\\n              <!-- 通常のマイクテスト説明 -->\\n              <h3 class=\\"instructions-title\\">マイクのテストを開始します</h3>\\n              <p class=\\"instructions-description\\">マイクテスト開始ボタンを押してマイクの使用を許可してください</p>\\n            {/if}\\n            \\n            {#if micPermission === 'pending'}\\n              <p class=\\"status-text\\">マイク準備中...</p>\\n            {:else if micPermission === 'denied'}\\n              <div class=\\"mic-test-button-area\\">\\n                <button class=\\"mic-test-button retry\\" on:click={requestMicrophone}>\\n                  マイク許可を再試行\\n                </button>\\n              </div>\\n            {:else if micPermission === 'initial'}\\n              <div class=\\"mic-test-button-area\\">\\n                <button class=\\"mic-test-button start\\" on:click={requestMicrophone}>\\n                  マイクテストを開始\\n                </button>\\n              </div>\\n            {/if}\\n          {:else}\\n            <!-- トレーニング開始段階の表示 -->\\n            <h3 class=\\"ready-title\\">マイク準備完了</h3>\\n            <p class=\\"ready-description\\">トレーニング開始ボタンを押してランダム基音モードへ進んでください</p>\\n            \\n            <div class=\\"training-start-button-area\\">\\n              <button class=\\"training-start-button enabled\\" on:click={() => window.location.href = selectedMode.path}>\\n                トレーニング開始\\n              </button>\\n            </div>\\n          {/if}\\n        </div>\\n      </Card>\\n    </div>\\n\\n    <!-- マイクテストセクション -->\\n    <div class=\\"test-section\\">\\n      <Card variant=\\"default\\" padding=\\"lg\\">\\n        <div class=\\"mic-test-content\\">\\n          \\n\\n          <!-- リアルタイム表示（常時表示） -->\\n          <div class=\\"realtime-display\\">\\n            <!-- 音量レベル -->\\n            <div class=\\"volume-section\\">\\n              <h3 class=\\"display-title\\">音量レベル</h3>\\n              <div class=\\"volume-bar-container\\">\\n                <div class=\\"volume-bar\\" style=\\"width: {currentVolume}%\\"></div>\\n              </div>\\n              <div class=\\"volume-text\\">{currentVolume.toFixed(1)}%</div>\\n              <div class=\\"volume-status\\">\\n                <span class=\\"status-pending\\">\\n                  {#if !volumeDetected && isListening}\\n                    ⏳ 声を出して音量を確認してください\\n                  {:else if !isListening}\\n                    マイクテスト開始後に表示されます\\n                  {:else}\\n                    &nbsp;\\n                  {/if}\\n                </span>\\n              </div>\\n            </div>\\n\\n            <!-- 周波数・音程表示 -->\\n            <div class=\\"frequency-section\\">\\n              <h3 class=\\"display-title\\">音程検出</h3>\\n              <div class=\\"frequency-display\\">\\n                <div class=\\"frequency-value\\">{currentFrequency.toFixed(1)} Hz</div>\\n                <div class=\\"note-value\\">{currentNote}</div>\\n              </div>\\n              <div class=\\"frequency-status\\">\\n                <span class=\\"status-pending\\">\\n                  {#if !frequencyDetected && isListening}\\n                    ⏳ 「ド」を発声して音程を確認してください\\n                  {:else if !isListening}\\n                    マイクテスト開始後に表示されます\\n                  {:else}\\n                    &nbsp;\\n                  {/if}\\n                </span>\\n              </div>\\n            </div>\\n          </div>\\n\\n        </div>\\n      </Card>\\n    </div>\\n\\n  </div>\\n</PageLayout>\\n\\n<style>\\n  .microphone-test {\\n    max-width: 800px;\\n    margin: 0 auto;\\n    display: flex;\\n    flex-direction: column;\\n    gap: var(--space-6);\\n  }\\n\\n  .header {\\n    text-align: center;\\n  }\\n\\n  .mic-test-header {\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    gap: var(--space-4);\\n    margin-bottom: var(--space-4);\\n  }\\n\\n  .mic-icon {\\n    width: 64px;\\n    height: 64px;\\n    border-radius: 50%;\\n    background-color: #dbeafe;\\n    color: #2563eb;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    flex-shrink: 0;\\n  }\\n\\n  .mic-test-title {\\n    font-size: var(--text-2xl);\\n    font-weight: 700;\\n    color: var(--color-gray-900);\\n    margin: 0 0 var(--space-2) 0;\\n  }\\n\\n  .mic-test-description {\\n    font-size: var(--text-base);\\n    color: var(--color-gray-600);\\n    margin: 0;\\n  }\\n\\n  .training-mode-info {\\n    margin-bottom: var(--space-6);\\n  }\\n\\n  .training-mode-content {\\n    text-align: center;\\n  }\\n\\n  .training-mode-title {\\n    font-size: var(--text-xl);\\n    font-weight: 600;\\n    color: var(--color-gray-900);\\n    margin: 0 0 var(--space-2) 0;\\n  }\\n\\n  .training-mode-description {\\n    font-size: var(--text-base);\\n    color: var(--color-gray-600);\\n    margin: 0;\\n  }\\n\\n  .mic-test-instructions {\\n    text-align: center;\\n    margin-bottom: var(--space-6);\\n  }\\n\\n  .instructions-title {\\n    font-size: var(--text-lg);\\n    font-weight: 600;\\n    color: var(--color-gray-900);\\n    margin: 0 0 var(--space-2) 0;\\n  }\\n\\n  .instructions-description {\\n    font-size: var(--text-sm);\\n    color: var(--color-gray-600);\\n    margin: 0;\\n  }\\n\\n  .status-text {\\n    font-size: var(--text-lg);\\n    font-weight: 600;\\n    color: var(--color-gray-900);\\n    margin: var(--space-6) 0;\\n    text-align: center;\\n  }\\n\\n  .status-text.voice-instruction {\\n    color: #2563eb;\\n    font-size: var(--text-xl);\\n    font-weight: 700;\\n  }\\n\\n  .ready-title {\\n    font-size: var(--text-xl);\\n    font-weight: 600;\\n    color: #2563eb;\\n    margin: var(--space-4) 0 var(--space-2) 0;\\n    text-align: center;\\n  }\\n\\n  .ready-description {\\n    font-size: var(--text-sm);\\n    color: var(--color-gray-600);\\n    margin: 0 0 var(--space-6) 0;\\n    text-align: center;\\n  }\\n\\n  .mic-test-button-area,\\n  .training-start-button-area {\\n    margin-top: var(--space-6);\\n    display: flex;\\n    justify-content: center;\\n  }\\n\\n  .mic-test-button {\\n    max-width: 300px;\\n    width: 100%;\\n    padding: 12px 16px;\\n    border: none;\\n    border-radius: 8px;\\n    font-size: 14px;\\n    font-weight: 500;\\n    cursor: pointer;\\n    transition: background-color 0.2s ease-in-out;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    gap: 8px;\\n  }\\n\\n  .mic-test-button.start {\\n    background-color: #2563eb;\\n    color: white;\\n  }\\n\\n  .mic-test-button.start:hover {\\n    background-color: #1d4ed8;\\n  }\\n\\n  .mic-test-button.preparing {\\n    background-color: #f59e0b;\\n    color: white;\\n    cursor: not-allowed;\\n  }\\n\\n  .mic-test-button.confirming {\\n    background-color: #8b5cf6;\\n    color: white;\\n    cursor: not-allowed;\\n  }\\n\\n  .mic-test-button.retry {\\n    background-color: #dc2626;\\n    color: white;\\n  }\\n\\n  .mic-test-button.retry:hover {\\n    background-color: #b91c1c;\\n  }\\n\\n  .training-start-button {\\n    max-width: 300px;\\n    width: 100%;\\n    padding: 12px 16px;\\n    border: none;\\n    border-radius: 8px;\\n    font-size: 14px;\\n    font-weight: 500;\\n    cursor: pointer;\\n    transition: background-color 0.2s ease-in-out;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    gap: 8px;\\n    background-color: #059669;\\n    color: white;\\n  }\\n\\n  .training-start-button.enabled:hover {\\n    background-color: #047857;\\n  }\\n\\n  .mic-status-granted {\\n    margin-bottom: var(--space-4);\\n    text-align: center;\\n  }\\n\\n  .status-indicator.success {\\n    background-color: #d1fae5;\\n    color: #065f46;\\n    border: 1px solid #34d399;\\n  }\\n\\n  .mic-test-content {\\n    text-align: center;\\n  }\\n\\n  .mic-status {\\n    margin-bottom: var(--space-6);\\n    display: flex;\\n    flex-direction: column;\\n    gap: var(--space-2);\\n  }\\n\\n  .status-indicator {\\n    padding: var(--space-3);\\n    border-radius: 8px;\\n    font-weight: 600;\\n    font-size: var(--text-sm);\\n  }\\n\\n  .status-indicator.pending {\\n    background-color: #fef3c7;\\n    color: #92400e;\\n    border: 1px solid #fcd34d;\\n  }\\n\\n\\n  .status-indicator.error {\\n    background-color: #fee2e2;\\n    color: #991b1b;\\n    border: 1px solid #fca5a5;\\n  }\\n\\n  .start-button,\\n  .retry-button {\\n    max-width: 300px;\\n    width: 100%;\\n    margin: 0 auto;\\n    padding: 12px 16px;\\n    background-color: #2563eb;\\n    color: white;\\n    border: none;\\n    border-radius: 8px;\\n    font-size: 14px;\\n    font-weight: 500;\\n    cursor: pointer;\\n    transition: background-color 0.2s ease-in-out;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    gap: 8px;\\n  }\\n\\n  .start-button:hover,\\n  .retry-button:hover {\\n    background-color: #1d4ed8;\\n  }\\n\\n  .training-button {\\n    max-width: 300px;\\n    width: 100%;\\n    margin: 0 auto;\\n    padding: 12px 16px;\\n    border: none;\\n    border-radius: 8px;\\n    font-size: 14px;\\n    font-weight: 500;\\n    cursor: pointer;\\n    transition: background-color 0.2s ease-in-out;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    gap: 8px;\\n  }\\n\\n  .training-button.enabled {\\n    background-color: #059669;\\n    color: white;\\n  }\\n\\n  .training-button.enabled:hover {\\n    background-color: #047857;\\n  }\\n\\n  .training-button.disabled {\\n    background-color: #f3f4f6;\\n    color: #9ca3af;\\n    cursor: not-allowed;\\n  }\\n\\n  .guidance-text {\\n    font-size: var(--text-sm);\\n    color: #2563eb;\\n    font-weight: 600;\\n    margin-bottom: var(--space-2);\\n    text-align: center;\\n  }\\n\\n  .realtime-display {\\n    display: grid;\\n    gap: var(--space-6);\\n    margin-bottom: var(--space-6);\\n  }\\n\\n  .display-title {\\n    font-size: var(--text-lg);\\n    font-weight: 600;\\n    color: var(--color-gray-900);\\n    margin: 0 0 var(--space-3) 0;\\n  }\\n\\n  .volume-section {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    min-height: 120px;\\n  }\\n\\n  .volume-bar-container {\\n    width: 100%;\\n    height: 20px;\\n    background-color: #e5e7eb;\\n    border-radius: 10px;\\n    overflow: hidden;\\n    margin-bottom: var(--space-2);\\n  }\\n\\n  .volume-bar {\\n    height: 100%;\\n    background-color: #10b981;\\n    border-radius: 10px;\\n    transition: width 0.1s ease;\\n  }\\n\\n  .volume-text {\\n    text-align: center;\\n    font-weight: 600;\\n    color: var(--color-gray-700);\\n    margin-bottom: var(--space-2);\\n  }\\n\\n  .frequency-display {\\n    margin-bottom: var(--space-2);\\n  }\\n\\n  .frequency-value {\\n    font-size: var(--text-2xl);\\n    font-weight: 700;\\n    color: var(--color-gray-900);\\n    margin-bottom: var(--space-1);\\n  }\\n\\n  .note-value {\\n    font-size: var(--text-lg);\\n    font-weight: 600;\\n    color: var(--color-gray-700);\\n  }\\n\\n  .volume-status,\\n  .frequency-status {\\n    text-align: center;\\n    min-height: 24px;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n  }\\n\\n\\n  .status-pending {\\n    color: var(--color-gray-600);\\n  }\\n\\n\\n  .start-content {\\n    text-align: center;\\n  }\\n\\n  @media (min-width: 768px) {\\n    .mic-test-header {\\n      flex-direction: row;\\n      text-align: left;\\n    }\\n\\n    .realtime-display {\\n      grid-template-columns: 1fr 1fr;\\n    }\\n  }\\n</style>"],"names":[],"mappings":"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"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$unsubscribe_page;
  validate_store(page, "page");
  $$unsubscribe_page = subscribe(page, (value) => value);
  let isListening = false;
  let currentVolume = 0;
  let currentFrequency = 0;
  let currentNote = "";
  function stopListening() {
    isListening = false;
  }
  onDestroy(() => {
    stopListening();
  });
  $$result.css.add(css);
  $$unsubscribe_page();
  return `${$$result.head += `<!-- HEAD_svelte-8st1fo_START -->${$$result.title = `<title>マイクテスト - 相対音感トレーニング</title>`, ""}<!-- HEAD_svelte-8st1fo_END -->`, ""} ${validate_component(PageLayout, "PageLayout").$$render($$result, { showBackButton: true }, {}, {
    default: () => {
      return `<div class="microphone-test svelte-1byxpqw"> <div class="header svelte-1byxpqw"><div class="mic-test-header svelte-1byxpqw"><div class="mic-icon svelte-1byxpqw"><svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z"></path><path d="M19 10v2a7 7 0 0 1-14 0v-2"></path><line x1="12" x2="12" y1="19" y2="22"></line><line x1="8" x2="16" y1="22" y2="22"></line></svg></div> <div><h1 class="mic-test-title svelte-1byxpqw" data-svelte-h="svelte-z7m4lk">マイクテスト</h1> <p class="mic-test-description svelte-1byxpqw" data-svelte-h="svelte-1vtv92f">音感トレーニングを始める前に、マイクの動作を確認します</p></div></div></div>  <div class="training-mode-info svelte-1byxpqw">${validate_component(Card, "Card").$$render($$result, { variant: "default", padding: "lg" }, {}, {
        default: () => {
          return `<div class="training-mode-content svelte-1byxpqw">${` ${` <h3 class="instructions-title svelte-1byxpqw" data-svelte-h="svelte-gfi16f">マイクのテストを開始します</h3> <p class="instructions-description svelte-1byxpqw" data-svelte-h="svelte-1w19y1h">マイクテスト開始ボタンを押してマイクの使用を許可してください</p>`} ${`${`${`<div class="mic-test-button-area svelte-1byxpqw"><button class="mic-test-button start svelte-1byxpqw" data-svelte-h="svelte-caex95">マイクテストを開始</button></div>`}`}`}`}</div>`;
        }
      })}</div>  <div class="test-section">${validate_component(Card, "Card").$$render($$result, { variant: "default", padding: "lg" }, {}, {
        default: () => {
          return `<div class="mic-test-content svelte-1byxpqw"> <div class="realtime-display svelte-1byxpqw"> <div class="volume-section svelte-1byxpqw"><h3 class="display-title svelte-1byxpqw" data-svelte-h="svelte-1nc8gri">音量レベル</h3> <div class="volume-bar-container svelte-1byxpqw"><div class="volume-bar svelte-1byxpqw" style="${"width: " + escape(currentVolume, true) + "%"}"></div></div> <div class="volume-text svelte-1byxpqw">${escape(currentVolume.toFixed(1))}%</div> <div class="volume-status svelte-1byxpqw"><span class="status-pending svelte-1byxpqw">${isListening ? `⏳ 声を出して音量を確認してください` : `${!isListening ? `マイクテスト開始後に表示されます` : ` `}`}</span></div></div>  <div class="frequency-section"><h3 class="display-title svelte-1byxpqw" data-svelte-h="svelte-1ofzoy2">音程検出</h3> <div class="frequency-display svelte-1byxpqw"><div class="frequency-value svelte-1byxpqw">${escape(currentFrequency.toFixed(1))} Hz</div> <div class="note-value svelte-1byxpqw">${escape(currentNote)}</div></div> <div class="frequency-status svelte-1byxpqw"><span class="status-pending svelte-1byxpqw">${isListening ? `⏳ 「ド」を発声して音程を確認してください` : `${!isListening ? `マイクテスト開始後に表示されます` : ` `}`}</span></div></div></div></div>`;
        }
      })}</div></div>`;
    }
  })}`;
});
export {
  Page as default
};
