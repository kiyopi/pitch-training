import { c as create_ssr_component, b as validate_store, d as subscribe, o as onDestroy, v as validate_component, e as escape } from "../../../chunks/ssr.js";
import { p as page } from "../../../chunks/stores.js";
import { P as PageLayout, C as Card, B as Button } from "../../../chunks/PageLayout.js";
const css = {
  code: ".microphone-test.svelte-167wv5d.svelte-167wv5d{max-width:800px;margin:0 auto;display:flex;flex-direction:column;gap:var(--space-6)}.header.svelte-167wv5d.svelte-167wv5d{text-align:center}.mic-test-header.svelte-167wv5d.svelte-167wv5d{display:flex;align-items:center;justify-content:center;gap:var(--space-4);margin-bottom:var(--space-4)}.mic-icon.svelte-167wv5d.svelte-167wv5d{width:64px;height:64px;border-radius:50%;background-color:#dbeafe;color:#2563eb;display:flex;align-items:center;justify-content:center;flex-shrink:0}.mic-test-title.svelte-167wv5d.svelte-167wv5d{font-size:var(--text-2xl);font-weight:700;color:var(--color-gray-900);margin:0 0 var(--space-2) 0}.mic-test-description.svelte-167wv5d.svelte-167wv5d{font-size:var(--text-base);color:var(--color-gray-600);margin:0}.mic-test-content.svelte-167wv5d.svelte-167wv5d{text-align:center}.mic-status.svelte-167wv5d.svelte-167wv5d{margin-bottom:var(--space-6);display:flex;flex-direction:column;gap:var(--space-2)}.status-indicator.svelte-167wv5d.svelte-167wv5d{padding:var(--space-3);border-radius:8px;font-weight:600;font-size:var(--text-sm)}.status-indicator.pending.svelte-167wv5d.svelte-167wv5d{background-color:#fef3c7;color:#92400e;border:1px solid #fcd34d}.status-indicator.error.svelte-167wv5d.svelte-167wv5d{background-color:#fee2e2;color:#991b1b;border:1px solid #fca5a5}.retry-button.svelte-167wv5d.svelte-167wv5d{padding:var(--space-2) var(--space-4);background-color:#2563eb;color:white;border:none;border-radius:6px;font-weight:600;cursor:pointer;transition:background-color 0.2s}.retry-button.svelte-167wv5d.svelte-167wv5d:hover{background-color:#1d4ed8}.realtime-display.svelte-167wv5d.svelte-167wv5d{display:grid;gap:var(--space-6);margin-bottom:var(--space-6)}.display-title.svelte-167wv5d.svelte-167wv5d{font-size:var(--text-lg);font-weight:600;color:var(--color-gray-900);margin:0 0 var(--space-3) 0}.volume-section.svelte-167wv5d.svelte-167wv5d{display:flex;flex-direction:column;justify-content:center;min-height:120px}.volume-bar-container.svelte-167wv5d.svelte-167wv5d{width:100%;height:20px;background-color:#e5e7eb;border-radius:10px;overflow:hidden;margin-bottom:var(--space-2)}.volume-bar.svelte-167wv5d.svelte-167wv5d{height:100%;background-color:#10b981;border-radius:10px;transition:width 0.1s ease}.volume-text.svelte-167wv5d.svelte-167wv5d{text-align:center;font-weight:600;color:var(--color-gray-700);margin-bottom:var(--space-2)}.frequency-display.svelte-167wv5d.svelte-167wv5d{margin-bottom:var(--space-2)}.frequency-value.svelte-167wv5d.svelte-167wv5d{font-size:var(--text-2xl);font-weight:700;color:var(--color-gray-900);margin-bottom:var(--space-1)}.note-value.svelte-167wv5d.svelte-167wv5d{font-size:var(--text-lg);font-weight:600;color:var(--color-gray-700)}.volume-status.svelte-167wv5d.svelte-167wv5d,.frequency-status.svelte-167wv5d.svelte-167wv5d{text-align:center;min-height:24px;display:flex;align-items:center;justify-content:center}.status-pending.svelte-167wv5d.svelte-167wv5d{color:var(--color-gray-600)}.guidance.svelte-167wv5d.svelte-167wv5d{padding:var(--space-4);background:#dbeafe;border-radius:8px;border:1px solid #93c5fd}.guidance-content.svelte-167wv5d h3.svelte-167wv5d{font-size:var(--text-lg);font-weight:600;color:var(--color-gray-900);margin:0 0 var(--space-1) 0}.guidance-content.svelte-167wv5d p.svelte-167wv5d{font-size:var(--text-sm);color:var(--color-gray-600);margin:0}.start-content.svelte-167wv5d.svelte-167wv5d{text-align:center}.start-title.svelte-167wv5d.svelte-167wv5d{font-size:var(--text-xl);font-weight:600;color:var(--color-gray-900);margin:0 0 var(--space-2) 0}.start-description.svelte-167wv5d.svelte-167wv5d{font-size:var(--text-base);color:var(--color-gray-600);margin:0 0 var(--space-6) 0}@media(min-width: 768px){.mic-test-header.svelte-167wv5d.svelte-167wv5d{flex-direction:row;text-align:left}.realtime-display.svelte-167wv5d.svelte-167wv5d{grid-template-columns:1fr 1fr}}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n  import { onMount, onDestroy } from 'svelte';\\n  import { page } from '$app/stores';\\n  import Card from '$lib/components/Card.svelte';\\n  import Button from '$lib/components/Button.svelte';\\n  import PageLayout from '$lib/components/PageLayout.svelte';\\n  \\n  // URL パラメータから mode を取得\\n  let mode = 'random';\\n  \\n  onMount(() => {\\n    if ($page.url.searchParams.has('mode')) {\\n      mode = $page.url.searchParams.get('mode') || 'random';\\n    }\\n  });\\n\\n  // マイクテスト状態管理（シンプル版）\\n  let micPermission = 'initial'; // 'initial' | 'pending' | 'granted' | 'denied'\\n  let isListening = false;\\n  let volumeDetected = false;\\n  let frequencyDetected = false;\\n  let currentVolume = 0;\\n  let currentFrequency = 0;\\n  let currentNote = '';\\n  \\n  // Web Audio API変数\\n  let audioContext = null;\\n  let mediaStream = null;\\n  let analyser = null;\\n  let animationFrame = null;\\n\\n  // トレーニングモード設定\\n  const trainingModes = {\\n    random: {\\n      name: 'ランダム基音モード',\\n      description: '10種類の基音からランダムに選択してトレーニング',\\n      color: 'green',\\n      path: './training/random'\\n    },\\n    continuous: {\\n      name: '連続チャレンジモード',\\n      description: '選択した回数だけ連続で実行し、総合評価を確認',\\n      color: 'orange',\\n      path: './training/continuous'\\n    },\\n    chromatic: {\\n      name: '12音階モード',\\n      description: 'クロマチックスケールの上行・下行で完全制覇',\\n      color: 'purple',\\n      path: './training/chromatic'\\n    }\\n  };\\n\\n  const selectedMode = trainingModes[mode] || trainingModes.random;\\n  $: startButtonEnabled = micPermission === 'granted' && volumeDetected && frequencyDetected;\\n  \\n  // マイク許可リクエスト（シンプル版）\\n  async function requestMicrophone() {\\n    micPermission = 'pending';\\n    \\n    try {\\n      // シンプルな設定でマイクアクセス\\n      mediaStream = await navigator.mediaDevices.getUserMedia({ audio: true });\\n      micPermission = 'granted';\\n      \\n      // AudioContextをユーザーアクション内で作成\\n      audioContext = new (window.AudioContext || window.webkitAudioContext)();\\n      \\n      // AudioContextがsuspendedの場合は再開\\n      if (audioContext.state === 'suspended') {\\n        await audioContext.resume();\\n      }\\n      \\n      // アナライザー設定（最適化）\\n      analyser = audioContext.createAnalyser();\\n      analyser.fftSize = 2048;\\n      analyser.smoothingTimeConstant = 0.8;\\n      analyser.minDecibels = -90;\\n      analyser.maxDecibels = -10;\\n      \\n      const source = audioContext.createMediaStreamSource(mediaStream);\\n      source.connect(analyser);\\n      \\n      isListening = true;\\n      analyzeAudio();\\n      \\n    } catch (error) {\\n      micPermission = 'denied';\\n    }\\n  }\\n  \\n  // 音声解析ループ（最適化済み）\\n  function analyzeAudio() {\\n    if (!isListening || !analyser) return;\\n    \\n    const bufferLength = analyser.frequencyBinCount;\\n    const dataArray = new Uint8Array(bufferLength);\\n    \\n    // 周波数データ取得\\n    analyser.getByteFrequencyData(dataArray);\\n    \\n    // RMS音量計算（マイクレベル最適化）\\n    let sum = 0;\\n    for (let i = 0; i < dataArray.length; i++) {\\n      sum += dataArray[i] * dataArray[i];\\n    }\\n    const rms = Math.sqrt(sum / dataArray.length);\\n    currentVolume = Math.min(100, (rms / 64) * 100);\\n    \\n    if (currentVolume > 15) {\\n      volumeDetected = true;\\n    }\\n    \\n    // 時間領域データ取得\\n    const timeDataArray = new Float32Array(analyser.fftSize);\\n    analyser.getFloatTimeDomainData(timeDataArray);\\n    \\n    // 音程検出\\n    const frequency = detectPitch(timeDataArray, audioContext.sampleRate);\\n    if (frequency > 80 && frequency < 800) {\\n      currentFrequency = frequency;\\n      currentNote = frequencyToNote(frequency);\\n      frequencyDetected = true;\\n    } else {\\n      currentFrequency = 0;\\n      currentNote = '';\\n    }\\n    \\n    animationFrame = requestAnimationFrame(analyzeAudio);\\n  }\\n  \\n  // シンプルな音程検出（最適化済み）\\n  function detectPitch(buffer, sampleRate) {\\n    // 音量チェック\\n    let rms = 0;\\n    for (let i = 0; i < buffer.length; i++) {\\n      rms += buffer[i] * buffer[i];\\n    }\\n    rms = Math.sqrt(rms / buffer.length);\\n    if (rms < 0.005) return 0;\\n    \\n    // 自己相関関数\\n    const minPeriod = Math.floor(sampleRate / 800);\\n    const maxPeriod = Math.floor(sampleRate / 80);\\n    \\n    let bestCorrelation = 0;\\n    let bestPeriod = 0;\\n    \\n    for (let period = minPeriod; period <= maxPeriod; period++) {\\n      let correlation = 0;\\n      let normalizer = 0;\\n      \\n      for (let i = 0; i < buffer.length - period; i++) {\\n        correlation += buffer[i] * buffer[i + period];\\n        normalizer += buffer[i] * buffer[i];\\n      }\\n      \\n      if (normalizer > 0) {\\n        correlation = correlation / Math.sqrt(normalizer);\\n        if (correlation > bestCorrelation) {\\n          bestCorrelation = correlation;\\n          bestPeriod = period;\\n        }\\n      }\\n    }\\n    \\n    return bestCorrelation > 0.25 ? sampleRate / bestPeriod : 0;\\n  }\\n  \\n  // 周波数から音名へ変換\\n  function frequencyToNote(frequency) {\\n    const A4 = 440;\\n    const semitonesFromA4 = Math.round(12 * Math.log2(frequency / A4));\\n    const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\\n    const noteIndex = ((semitonesFromA4 + 9) % 12 + 12) % 12;\\n    const octave = Math.floor((semitonesFromA4 + 9) / 12) + 4;\\n    const note = noteNames[noteIndex];\\n    const noteNamesJa = {\\n      'C': 'ド', 'C#': 'ド#', 'D': 'レ', 'D#': 'レ#', 'E': 'ミ', 'F': 'ファ',\\n      'F#': 'ファ#', 'G': 'ソ', 'G#': 'ソ#', 'A': 'ラ', 'A#': 'ラ#', 'B': 'シ'\\n    };\\n    return \`\${note}\${octave}（\${noteNamesJa[note]}\${octave}）\`;\\n  }\\n  \\n  // リスニング停止\\n  function stopListening() {\\n    isListening = false;\\n    \\n    if (animationFrame) {\\n      cancelAnimationFrame(animationFrame);\\n      animationFrame = null;\\n    }\\n    \\n    if (mediaStream) {\\n      mediaStream.getTracks().forEach(track => track.stop());\\n      mediaStream = null;\\n    }\\n    \\n    if (audioContext && audioContext.state !== 'closed') {\\n      audioContext.close();\\n      audioContext = null;\\n    }\\n    \\n    analyser = null;\\n  }\\n  \\n  // ページ離脱時のクリーンアップ\\n  onDestroy(() => {\\n    stopListening();\\n  });\\n<\/script>\\n\\n<svelte:head>\\n  <title>マイクテスト - 相対音感トレーニング</title>\\n</svelte:head>\\n\\n<PageLayout showBackButton={true}>\\n  <div class=\\"microphone-test\\">\\n    <!-- ヘッダー -->\\n    <div class=\\"header\\">\\n      <div class=\\"mic-test-header\\">\\n        <div class=\\"mic-icon\\">\\n          <svg width=\\"48\\" height=\\"48\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\" stroke=\\"currentColor\\" stroke-width=\\"2\\">\\n            <path d=\\"M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z\\"/>\\n            <path d=\\"M19 10v2a7 7 0 0 1-14 0v-2\\"/>\\n            <line x1=\\"12\\" x2=\\"12\\" y1=\\"19\\" y2=\\"22\\"/>\\n            <line x1=\\"8\\" x2=\\"16\\" y1=\\"22\\" y2=\\"22\\"/>\\n          </svg>\\n        </div>\\n        <div>\\n          <h1 class=\\"mic-test-title\\">マイクテスト</h1>\\n          <p class=\\"mic-test-description\\">音感トレーニングを始める前に、マイクの動作を確認します</p>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <!-- マイクテストセクション -->\\n    <div class=\\"test-section\\">\\n      <Card variant=\\"default\\" padding=\\"lg\\">\\n        <div class=\\"mic-test-content\\">\\n          \\n          <!-- マイク状態表示 -->\\n          <div class=\\"mic-status\\">\\n            {#if micPermission === 'pending'}\\n              <div class=\\"status-indicator pending\\">⏳ マイク許可を確認中...</div>\\n            {:else if micPermission === 'denied'}\\n              <div class=\\"status-indicator error\\">❌ マイクアクセスが拒否されました</div>\\n              <button class=\\"retry-button\\" on:click={requestMicrophone}>\\n                マイク許可を再試行\\n              </button>\\n            {:else if micPermission === 'initial'}\\n              <button class=\\"retry-button\\" on:click={requestMicrophone}>\\n                🎤 マイクテスト開始\\n              </button>\\n            {/if}\\n          </div>\\n\\n          <!-- リアルタイム表示（常時表示） -->\\n          <div class=\\"realtime-display\\">\\n            <!-- 音量レベル -->\\n            <div class=\\"volume-section\\">\\n              <h3 class=\\"display-title\\">音量レベル</h3>\\n              <div class=\\"volume-bar-container\\">\\n                <div class=\\"volume-bar\\" style=\\"width: {currentVolume}%\\"></div>\\n              </div>\\n              <div class=\\"volume-text\\">{currentVolume.toFixed(1)}%</div>\\n              <div class=\\"volume-status\\">\\n                <span class=\\"status-pending\\">\\n                  {#if !volumeDetected && isListening}\\n                    ⏳ 声を出して音量を確認してください\\n                  {:else if !isListening}\\n                    マイクテスト開始後に表示されます\\n                  {:else}\\n                    &nbsp;\\n                  {/if}\\n                </span>\\n              </div>\\n            </div>\\n\\n            <!-- 周波数・音程表示 -->\\n            <div class=\\"frequency-section\\">\\n              <h3 class=\\"display-title\\">音程検出</h3>\\n              <div class=\\"frequency-display\\">\\n                <div class=\\"frequency-value\\">{currentFrequency.toFixed(1)} Hz</div>\\n                <div class=\\"note-value\\">{currentNote}</div>\\n              </div>\\n              <div class=\\"frequency-status\\">\\n                <span class=\\"status-pending\\">\\n                  {#if !frequencyDetected && isListening}\\n                    ⏳ 「ド」を発声して音程を確認してください\\n                  {:else if !isListening}\\n                    マイクテスト開始後に表示されます\\n                  {:else}\\n                    &nbsp;\\n                  {/if}\\n                </span>\\n              </div>\\n            </div>\\n          </div>\\n\\n          <!-- ガイダンス -->\\n          {#if volumeDetected && !frequencyDetected && isListening}\\n            <div class=\\"guidance\\">\\n              <div class=\\"guidance-content\\">\\n                <h3>「ド」を発声してください</h3>\\n                <p>任意の高さで「ドー」と歌うように発声してください</p>\\n              </div>\\n            </div>\\n          {/if}\\n        </div>\\n      </Card>\\n    </div>\\n\\n    <!-- スタートボタン -->\\n    <div class=\\"start-section\\">\\n      <Card variant=\\"default\\" padding=\\"lg\\">\\n        <div class=\\"start-content\\">\\n          <h3 class=\\"start-title\\">{selectedMode.name}</h3>\\n          <p class=\\"start-description\\">\\n            {selectedMode.description}\\n          </p>\\n          \\n          {#if startButtonEnabled}\\n            <Button \\n              href={selectedMode.path} \\n              variant=\\"primary\\" \\n              size=\\"lg\\" \\n              fullWidth\\n            >\\n              トレーニング開始\\n            </Button>\\n          {:else}\\n            <Button \\n              variant=\\"disabled\\" \\n              size=\\"lg\\" \\n              fullWidth \\n              disabled\\n            >\\n              マイクテスト完了後に開始\\n            </Button>\\n          {/if}\\n        </div>\\n      </Card>\\n    </div>\\n  </div>\\n</PageLayout>\\n\\n<style>\\n  .microphone-test {\\n    max-width: 800px;\\n    margin: 0 auto;\\n    display: flex;\\n    flex-direction: column;\\n    gap: var(--space-6);\\n  }\\n\\n  .header {\\n    text-align: center;\\n  }\\n\\n  .mic-test-header {\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    gap: var(--space-4);\\n    margin-bottom: var(--space-4);\\n  }\\n\\n  .mic-icon {\\n    width: 64px;\\n    height: 64px;\\n    border-radius: 50%;\\n    background-color: #dbeafe;\\n    color: #2563eb;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    flex-shrink: 0;\\n  }\\n\\n  .mic-test-title {\\n    font-size: var(--text-2xl);\\n    font-weight: 700;\\n    color: var(--color-gray-900);\\n    margin: 0 0 var(--space-2) 0;\\n  }\\n\\n  .mic-test-description {\\n    font-size: var(--text-base);\\n    color: var(--color-gray-600);\\n    margin: 0;\\n  }\\n\\n  .mic-test-content {\\n    text-align: center;\\n  }\\n\\n  .mic-status {\\n    margin-bottom: var(--space-6);\\n    display: flex;\\n    flex-direction: column;\\n    gap: var(--space-2);\\n  }\\n\\n  .status-indicator {\\n    padding: var(--space-3);\\n    border-radius: 8px;\\n    font-weight: 600;\\n    font-size: var(--text-sm);\\n  }\\n\\n  .status-indicator.pending {\\n    background-color: #fef3c7;\\n    color: #92400e;\\n    border: 1px solid #fcd34d;\\n  }\\n\\n\\n  .status-indicator.error {\\n    background-color: #fee2e2;\\n    color: #991b1b;\\n    border: 1px solid #fca5a5;\\n  }\\n\\n  .retry-button {\\n    padding: var(--space-2) var(--space-4);\\n    background-color: #2563eb;\\n    color: white;\\n    border: none;\\n    border-radius: 6px;\\n    font-weight: 600;\\n    cursor: pointer;\\n    transition: background-color 0.2s;\\n  }\\n\\n  .retry-button:hover {\\n    background-color: #1d4ed8;\\n  }\\n\\n  .realtime-display {\\n    display: grid;\\n    gap: var(--space-6);\\n    margin-bottom: var(--space-6);\\n  }\\n\\n  .display-title {\\n    font-size: var(--text-lg);\\n    font-weight: 600;\\n    color: var(--color-gray-900);\\n    margin: 0 0 var(--space-3) 0;\\n  }\\n\\n  .volume-section {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    min-height: 120px;\\n  }\\n\\n  .volume-bar-container {\\n    width: 100%;\\n    height: 20px;\\n    background-color: #e5e7eb;\\n    border-radius: 10px;\\n    overflow: hidden;\\n    margin-bottom: var(--space-2);\\n  }\\n\\n  .volume-bar {\\n    height: 100%;\\n    background-color: #10b981;\\n    border-radius: 10px;\\n    transition: width 0.1s ease;\\n  }\\n\\n  .volume-text {\\n    text-align: center;\\n    font-weight: 600;\\n    color: var(--color-gray-700);\\n    margin-bottom: var(--space-2);\\n  }\\n\\n  .frequency-display {\\n    margin-bottom: var(--space-2);\\n  }\\n\\n  .frequency-value {\\n    font-size: var(--text-2xl);\\n    font-weight: 700;\\n    color: var(--color-gray-900);\\n    margin-bottom: var(--space-1);\\n  }\\n\\n  .note-value {\\n    font-size: var(--text-lg);\\n    font-weight: 600;\\n    color: var(--color-gray-700);\\n  }\\n\\n  .volume-status,\\n  .frequency-status {\\n    text-align: center;\\n    min-height: 24px;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n  }\\n\\n\\n  .status-pending {\\n    color: var(--color-gray-600);\\n  }\\n\\n  .guidance {\\n    padding: var(--space-4);\\n    background: #dbeafe;\\n    border-radius: 8px;\\n    border: 1px solid #93c5fd;\\n  }\\n\\n  .guidance-content h3 {\\n    font-size: var(--text-lg);\\n    font-weight: 600;\\n    color: var(--color-gray-900);\\n    margin: 0 0 var(--space-1) 0;\\n  }\\n\\n  .guidance-content p {\\n    font-size: var(--text-sm);\\n    color: var(--color-gray-600);\\n    margin: 0;\\n  }\\n\\n  .start-content {\\n    text-align: center;\\n  }\\n\\n  .start-title {\\n    font-size: var(--text-xl);\\n    font-weight: 600;\\n    color: var(--color-gray-900);\\n    margin: 0 0 var(--space-2) 0;\\n  }\\n\\n  .start-description {\\n    font-size: var(--text-base);\\n    color: var(--color-gray-600);\\n    margin: 0 0 var(--space-6) 0;\\n  }\\n\\n  @media (min-width: 768px) {\\n    .mic-test-header {\\n      flex-direction: row;\\n      text-align: left;\\n    }\\n\\n    .realtime-display {\\n      grid-template-columns: 1fr 1fr;\\n    }\\n  }\\n</style>"],"names":[],"mappings":"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"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let startButtonEnabled;
  let $$unsubscribe_page;
  validate_store(page, "page");
  $$unsubscribe_page = subscribe(page, (value) => value);
  let mode = "random";
  let micPermission = "initial";
  let isListening = false;
  let currentVolume = 0;
  let currentFrequency = 0;
  let currentNote = "";
  const trainingModes = {
    random: {
      name: "ランダム基音モード",
      description: "10種類の基音からランダムに選択してトレーニング",
      color: "green",
      path: "./training/random"
    },
    continuous: {
      name: "連続チャレンジモード",
      description: "選択した回数だけ連続で実行し、総合評価を確認",
      color: "orange",
      path: "./training/continuous"
    },
    chromatic: {
      name: "12音階モード",
      description: "クロマチックスケールの上行・下行で完全制覇",
      color: "purple",
      path: "./training/chromatic"
    }
  };
  const selectedMode = trainingModes[mode] || trainingModes.random;
  function stopListening() {
    isListening = false;
  }
  onDestroy(() => {
    stopListening();
  });
  $$result.css.add(css);
  startButtonEnabled = micPermission === "granted";
  $$unsubscribe_page();
  return `${$$result.head += `<!-- HEAD_svelte-8st1fo_START -->${$$result.title = `<title>マイクテスト - 相対音感トレーニング</title>`, ""}<!-- HEAD_svelte-8st1fo_END -->`, ""} ${validate_component(PageLayout, "PageLayout").$$render($$result, { showBackButton: true }, {}, {
    default: () => {
      return `<div class="microphone-test svelte-167wv5d"> <div class="header svelte-167wv5d"><div class="mic-test-header svelte-167wv5d"><div class="mic-icon svelte-167wv5d"><svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z"></path><path d="M19 10v2a7 7 0 0 1-14 0v-2"></path><line x1="12" x2="12" y1="19" y2="22"></line><line x1="8" x2="16" y1="22" y2="22"></line></svg></div> <div><h1 class="mic-test-title svelte-167wv5d" data-svelte-h="svelte-z7m4lk">マイクテスト</h1> <p class="mic-test-description svelte-167wv5d" data-svelte-h="svelte-1vtv92f">音感トレーニングを始める前に、マイクの動作を確認します</p></div></div></div>  <div class="test-section">${validate_component(Card, "Card").$$render($$result, { variant: "default", padding: "lg" }, {}, {
        default: () => {
          return `<div class="mic-test-content svelte-167wv5d"> <div class="mic-status svelte-167wv5d">${`${`${`<button class="retry-button svelte-167wv5d" data-svelte-h="svelte-1vkqvr3">🎤 マイクテスト開始</button>`}`}`}</div>  <div class="realtime-display svelte-167wv5d"> <div class="volume-section svelte-167wv5d"><h3 class="display-title svelte-167wv5d" data-svelte-h="svelte-1nc8gri">音量レベル</h3> <div class="volume-bar-container svelte-167wv5d"><div class="volume-bar svelte-167wv5d" style="${"width: " + escape(currentVolume, true) + "%"}"></div></div> <div class="volume-text svelte-167wv5d">${escape(currentVolume.toFixed(1))}%</div> <div class="volume-status svelte-167wv5d"><span class="status-pending svelte-167wv5d">${isListening ? `⏳ 声を出して音量を確認してください` : `${!isListening ? `マイクテスト開始後に表示されます` : ` `}`}</span></div></div>  <div class="frequency-section"><h3 class="display-title svelte-167wv5d" data-svelte-h="svelte-1ofzoy2">音程検出</h3> <div class="frequency-display svelte-167wv5d"><div class="frequency-value svelte-167wv5d">${escape(currentFrequency.toFixed(1))} Hz</div> <div class="note-value svelte-167wv5d">${escape(currentNote)}</div></div> <div class="frequency-status svelte-167wv5d"><span class="status-pending svelte-167wv5d">${isListening ? `⏳ 「ド」を発声して音程を確認してください` : `${!isListening ? `マイクテスト開始後に表示されます` : ` `}`}</span></div></div></div>  ${``}</div>`;
        }
      })}</div>  <div class="start-section">${validate_component(Card, "Card").$$render($$result, { variant: "default", padding: "lg" }, {}, {
        default: () => {
          return `<div class="start-content svelte-167wv5d"><h3 class="start-title svelte-167wv5d">${escape(selectedMode.name)}</h3> <p class="start-description svelte-167wv5d">${escape(selectedMode.description)}</p> ${startButtonEnabled ? `${validate_component(Button, "Button").$$render(
            $$result,
            {
              href: selectedMode.path,
              variant: "primary",
              size: "lg",
              fullWidth: true
            },
            {},
            {
              default: () => {
                return `トレーニング開始`;
              }
            }
          )}` : `${validate_component(Button, "Button").$$render(
            $$result,
            {
              variant: "disabled",
              size: "lg",
              fullWidth: true,
              disabled: true
            },
            {},
            {
              default: () => {
                return `マイクテスト完了後に開始`;
              }
            }
          )}`}</div>`;
        }
      })}</div></div>`;
    }
  })}`;
});
export {
  Page as default
};
