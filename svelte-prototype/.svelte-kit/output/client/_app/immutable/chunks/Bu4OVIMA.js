class u{constructor(){this.audioContext=null,this.mediaStream=null,this.sourceNode=null,this.analysers=new Map,this.filters=new Map,this.refCount=0,this.initPromise=null,this.isInitialized=!1,this.lastError=null}async initialize(){if(this.initPromise)return this.initPromise;if(this.isInitialized&&this.audioContext&&this.mediaStream)return this.refCount++,{audioContext:this.audioContext,mediaStream:this.mediaStream,sourceNode:this.sourceNode};this.initPromise=this._doInitialize();try{const e=await this.initPromise;return this.initPromise=null,e}catch(e){throw this.initPromise=null,e}}async _doInitialize(){try{if(console.log("🎤 [AudioManager] 初期化開始"),this.audioContext||(this.audioContext=new(window.AudioContext||window.webkitAudioContext),console.log("✅ [AudioManager] AudioContext作成完了")),this.audioContext.state==="suspended"&&(await this.audioContext.resume(),console.log("✅ [AudioManager] AudioContext再開完了")),this.mediaStream||(this.mediaStream=await navigator.mediaDevices.getUserMedia({audio:{echoCancellation:!1,noiseSuppression:!1,autoGainControl:!1}}),console.log("✅ [AudioManager] MediaStream取得完了")),!this.sourceNode){this.sourceNode=this.audioContext.createMediaStreamSource(this.mediaStream),console.log("✅ [AudioManager] SourceNode作成完了");const e=this.mediaStream.getTracks();console.log("🎤 [AudioManager] MediaStream tracks:",e.map(t=>({kind:t.kind,label:t.label,enabled:t.enabled,readyState:t.readyState,muted:t.muted})))}return this.isInitialized=!0,this.refCount++,this.lastError=null,console.log(`🎤 [AudioManager] 初期化完了 (参照カウント: ${this.refCount})`),{audioContext:this.audioContext,mediaStream:this.mediaStream,sourceNode:this.sourceNode}}catch(e){throw console.error("❌ [AudioManager] 初期化エラー:",e),this.lastError=e,this.isInitialized=!1,this._cleanup(),e}}createAnalyser(e,t={}){if(!this.isInitialized||!this.audioContext||!this.sourceNode)throw new Error("AudioManager not initialized. Call initialize() first.");this.removeAnalyser(e);const{fftSize:i=2048,smoothingTimeConstant:o=.8,minDecibels:n=-90,maxDecibels:r=-10,useFilters:l=!0}=t,a=this.audioContext.createAnalyser();if(a.fftSize=i,a.smoothingTimeConstant=o,a.minDecibels=n,a.maxDecibels=r,this.sourceNode,l){const s=this._createFilterChain();this.filters.set(e,s),this.sourceNode.connect(s.highpass),s.highpass.connect(s.lowpass),s.lowpass.connect(s.notch),s.notch.connect(a),console.log(`🔧 [AudioManager] フィルター付きAnalyser作成: ${e}`)}else this.sourceNode.connect(a),console.log(`🔧 [AudioManager] 生信号Analyser作成: ${e}`);return this.analysers.set(e,a),a}_createFilterChain(){const e=this.audioContext.createBiquadFilter();e.type="highpass",e.frequency.setValueAtTime(80,this.audioContext.currentTime),e.Q.setValueAtTime(.7,this.audioContext.currentTime);const t=this.audioContext.createBiquadFilter();t.type="lowpass",t.frequency.setValueAtTime(800,this.audioContext.currentTime),t.Q.setValueAtTime(.7,this.audioContext.currentTime);const i=this.audioContext.createBiquadFilter();return i.type="notch",i.frequency.setValueAtTime(60,this.audioContext.currentTime),i.Q.setValueAtTime(10,this.audioContext.currentTime),{highpass:e,lowpass:t,notch:i}}removeAnalyser(e){if(this.analysers.has(e)&&(this.analysers.get(e).disconnect(),this.analysers.delete(e),console.log(`🗑️ [AudioManager] Analyser削除: ${e}`)),this.filters.has(e)){const t=this.filters.get(e);t.highpass.disconnect(),t.lowpass.disconnect(),t.notch.disconnect(),this.filters.delete(e),console.log(`🗑️ [AudioManager] フィルターチェーン削除: ${e}`)}}release(e=[]){e.forEach(t=>this.removeAnalyser(t)),this.refCount=Math.max(0,this.refCount-1),console.log(`📉 [AudioManager] 参照カウント減算: ${this.refCount}`),this.refCount<=0&&(console.log("🧹 [AudioManager] 全リソースクリーンアップ開始"),this._cleanup())}forceCleanup(){console.log("🚨 [AudioManager] 強制クリーンアップ実行"),this._cleanup()}_cleanup(){for(const e of this.analysers.keys())this.removeAnalyser(e);this.mediaStream&&(this.mediaStream.getTracks().forEach(e=>{e.stop(),console.log("🛑 [AudioManager] MediaStreamTrack停止")}),this.mediaStream=null),this.audioContext&&this.audioContext.state!=="closed"&&(this.audioContext.close(),console.log("🛑 [AudioManager] AudioContext閉鎖"),this.audioContext=null),this.sourceNode&&(this.sourceNode.disconnect(),this.sourceNode=null),this.isInitialized=!1,this.refCount=0,this.initPromise=null,console.log("✅ [AudioManager] クリーンアップ完了")}getStatus(){var e,t;return{isInitialized:this.isInitialized,refCount:this.refCount,audioContextState:((e=this.audioContext)==null?void 0:e.state)||"none",mediaStreamActive:((t=this.mediaStream)==null?void 0:t.active)||!1,activeAnalysers:Array.from(this.analysers.keys()),activeFilters:Array.from(this.filters.keys()),lastError:this.lastError}}checkMediaStreamHealth(){if(!this.mediaStream)return{healthy:!1,reason:"MediaStream not initialized"};const e=this.mediaStream.getTracks();if(e.length===0)return{healthy:!1,reason:"No tracks available"};const t=e.find(i=>i.kind==="audio");return t?t.readyState==="ended"?{healthy:!1,reason:"Audio track ended"}:t.enabled?{healthy:!0,track:t}:{healthy:!1,reason:"Audio track disabled"}:{healthy:!1,reason:"No audio track found"}}}const h=new u;typeof window<"u"&&(window.audioManager=h);export{h as a};
