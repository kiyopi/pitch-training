class FrequencyDisplay {
    constructor() {
        console.log('üé§ FrequencyDisplay v1.0.0 ÂàùÊúüÂåñÈñãÂßã');
        
        // Âü∫Êú¨„Éó„É≠„Éë„ÉÜ„Ç£
        this.audioContext = null;
        this.analyzer = null;
        this.microphone = null;
        this.mediaStream = null;
        this.isRunning = false;
        this.frameCount = 0;
        
        // CanvasË®≠ÂÆö
        this.canvas = document.getElementById('waveform-canvas');
        this.ctx = this.canvas.getContext('2d');
        
        // Èü≥Á®ãÊ§úÂá∫Áî®„Éá„Éº„Çø
        this.noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];
        this.noteNamesJP = ['„Éâ', '„Éâ#', '„É¨', '„É¨#', '„Éü', '„Éï„Ç°', '„Éï„Ç°#', '„ÇΩ', '„ÇΩ#', '„É©', '„É©#', '„Ç∑'];
        
        // ÂàùÊúüÂåñ
        this.setupEventListeners();
        this.log('üé§ FrequencyDisplay v1.0.0 ÂàùÊúüÂåñÂÆå‰∫Ü');
    }
    
    setupEventListeners() {
        document.getElementById('start-btn').addEventListener('click', () => {
            this.startCapture();
        });
        
        document.getElementById('stop-btn').addEventListener('click', () => {
            this.stopCapture();
        });
    }
    
    async startCapture() {
        try {
            this.log('üöÄ „Éû„Ç§„ÇØ„Ç≠„É£„Éó„ÉÅ„É£ÈñãÂßã...');
            
            // UIÊõ¥Êñ∞
            document.getElementById('start-btn').style.display = 'none';
            document.getElementById('stop-btn').style.display = 'inline-block';
            
            // AudioContextÂàùÊúüÂåñ
            await this.initAudioContext();
            
            // „Éû„Ç§„ÇØ„Ç¢„ÇØ„Çª„ÇπÔºàmic-testÊàêÂäüÊâãÊ≥ïÔºâ
            await this.initMicrophone();
            
            // isRunning„ÇíÂÖà„Å´Ë®≠ÂÆö
            this.isRunning = true;
            
            // Âë®Ê≥¢Êï∞Ê§úÂá∫ÈñãÂßã
            this.startFrequencyDetection();
            
            this.log('‚úÖ Âë®Ê≥¢Êï∞Ê§úÂá∫ÈñãÂßã');
            
        } catch (error) {
            this.log(`‚ùå „Ç®„É©„Éº: ${error.message}`);
            this.resetUI();
        }
    }
    
    async initAudioContext() {
        this.log('üéõÔ∏è AudioContextÂàùÊúüÂåñ‰∏≠...');
        
        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
        this.updateStatus('audio-status', this.audioContext.state, 'active');
        
        if (this.audioContext.state === 'suspended') {
            await this.audioContext.resume();
            this.log('üîÑ AudioContextÂÜçÈñãÂÆå‰∫Ü');
        }
        
        this.updateStatus('audio-status', this.audioContext.state, 'active');
        this.log(`‚úÖ AudioContext: ${this.audioContext.state}`);
    }
    
    async initMicrophone() {
        this.log('üé§ „Éû„Ç§„ÇØ„Ç¢„ÇØ„Çª„ÇπË¶ÅÊ±Ç‰∏≠...');
        
        // mic-testÊàêÂäüÊâãÊ≥ï: „Ç∑„É≥„Éó„É´„Å™Âà∂Á¥Ñ
        const constraints = { audio: true };
        this.log('üìã „Éû„Ç§„ÇØÂà∂Á¥Ñ:', constraints);
        
        this.mediaStream = await navigator.mediaDevices.getUserMedia(constraints);
        
        this.log(`üì° „Éû„Ç§„ÇØ„Çπ„Éà„É™„Éº„É†ÂèñÂæóÊàêÂäü (ID: ${this.mediaStream.id})`);
        this.updateStatus('mic-status', '„Ç¢„ÇØ„ÉÜ„Ç£„Éñ', 'active');
        
        // „Ç™„Éº„Éá„Ç£„Ç™Ëß£ÊûêÂô®Ë®≠ÂÆöÔºàmic-testÊàêÂäüÊâãÊ≥ïÔºâ
        this.analyzer = this.audioContext.createAnalyser();
        this.analyzer.fftSize = 2048;
        this.analyzer.smoothingTimeConstant = 0.1;
        this.analyzer.minDecibels = -100;
        this.analyzer.maxDecibels = -10;
        
        this.log('üìä „Ç¢„Éä„É©„Ç§„Ç∂„ÉºË®≠ÂÆöÂÆå‰∫Ü');
        
        // „Éû„Ç§„ÇØÊé•Á∂öÔºàmic-testÊàêÂäüÊâãÊ≥ï: „Ç≤„Ç§„É≥„Éé„Éº„ÉâÁµåÁî±Ôºâ
        this.microphone = this.audioContext.createMediaStreamSource(this.mediaStream);
        
        const gainNode = this.audioContext.createGain();
        gainNode.gain.value = 1.0;
        
        this.microphone.connect(gainNode);
        gainNode.connect(this.analyzer);
        
        this.log('üîó „Ç≤„Ç§„É≥„Éé„Éº„ÉâÁµåÁî±Êé•Á∂öÂÆå‰∫Ü');
        
        // Âá∫ÂäõÂÖàÊé•Á∂öÔºàSafariÂØæÂøúÔºâ
        const outputGain = this.audioContext.createGain();
        outputGain.gain.value = 0; // Èü≥„ÅØÂá∫„Åï„Å™„ÅÑ
        this.analyzer.connect(outputGain);
        outputGain.connect(this.audioContext.destination);
        
        this.log('üîå Âá∫ÂäõÂÖàÊé•Á∂öÂÆå‰∫Ü');
        
        // „Éá„Éº„ÇøÂèñÂæó„ÉÜ„Çπ„Éà
        setTimeout(() => this.testDataFlow(), 500);
    }
    
    testDataFlow() {
        this.log('üîç „Éá„Éº„Çø„Éï„É≠„Éº„ÉÜ„Çπ„ÉàÈñãÂßã...');
        
        const timeData = new Uint8Array(this.analyzer.fftSize);
        const freqData = new Float32Array(this.analyzer.frequencyBinCount);
        
        this.analyzer.getByteTimeDomainData(timeData);
        this.analyzer.getFloatFrequencyData(freqData);
        
        const timeDataActive = timeData.filter(v => v !== 128).length;
        const freqDataActive = freqData.filter(v => v > -Infinity).length;
        
        this.log(`üìä „Éá„Éº„Çø„Éï„É≠„Éº„ÉÜ„Çπ„Éà: ÊôÇÈñì=${timeDataActive}/${timeData.length}, Âë®Ê≥¢Êï∞=${freqDataActive}/${freqData.length}`);
        
        if (timeDataActive > 0 || freqDataActive > 0) {
            this.log('‚úÖ „Éá„Éº„Çø„Éï„É≠„ÉºÊ≠£Â∏∏');
        } else {
            this.log('‚ö†Ô∏è „Éá„Éº„Çø„Éï„É≠„ÉºÁ¢∫Ë™ç„Åß„Åç„Åö');
        }
    }
    
    startFrequencyDetection() {
        this.log('üìä Âë®Ê≥¢Êï∞Ê§úÂá∫„É´„Éº„ÉóÈñãÂßã');
        
        const detectLoop = () => {
            if (!this.isRunning) {
                this.log('‚ö†Ô∏è Âë®Ê≥¢Êï∞Ê§úÂá∫ÂÅúÊ≠¢: isRunning=false');
                return;
            }
            
            this.frameCount++;
            this.updateStatus('frame-count', this.frameCount.toString());
            
            // „Éá„Éº„ÇøÂèñÂæó
            const timeData = new Uint8Array(this.analyzer.fftSize);
            const freqData = new Float32Array(this.analyzer.frequencyBinCount);
            
            this.analyzer.getByteTimeDomainData(timeData);
            this.analyzer.getFloatFrequencyData(freqData);
            
            // Èü≥ÈáèË®àÁÆó
            const volume = this.calculateVolume(timeData);
            this.updateStatus('volume-status', `${Math.round(volume)}%`, volume > 1 ? 'active' : '');
            
            // Âë®Ê≥¢Êï∞Ê§úÂá∫
            const frequency = this.detectPitch(freqData);
            
            // Âë®Ê≥¢Êï∞Ë°®Á§∫Êõ¥Êñ∞
            this.updateFrequencyDisplay(frequency);
            
            // Èü≥Á®ãÊ§úÂá∫
            if (frequency > 0) {
                const noteInfo = this.frequencyToNote(frequency);
                this.updateNoteDisplay(noteInfo);
            } else {
                this.updateNoteDisplay(null);
            }
            
            // Ê≥¢ÂΩ¢ÊèèÁîª
            this.drawWaveform(timeData, volume);
            
            requestAnimationFrame(detectLoop);
        };
        
        detectLoop();
    }
    
    calculateVolume(timeData) {
        let sum = 0;
        let maxAmplitude = 0;
        
        for (let i = 0; i < timeData.length; i++) {
            const sample = (timeData[i] - 128) / 128;
            sum += sample * sample;
            maxAmplitude = Math.max(maxAmplitude, Math.abs(sample));
        }
        
        const rms = Math.sqrt(sum / timeData.length);
        return Math.max(rms * 200, maxAmplitude * 100);
    }
    
    detectPitch(freqData) {
        let maxIndex = 0;
        let maxValue = -Infinity;
        
        // ‰∫∫Â£∞„ÅÆÂë®Ê≥¢Êï∞ÁØÑÂõ≤„Çí„ÉÅ„Çß„ÉÉ„ÇØÔºà85Hz-1100HzÔºâ
        const minBin = Math.floor(85 * freqData.length / (this.audioContext.sampleRate / 2));
        const maxBin = Math.floor(1100 * freqData.length / (this.audioContext.sampleRate / 2));
        
        for (let i = minBin; i < maxBin; i++) {
            if (freqData[i] > maxValue) {
                maxValue = freqData[i];
                maxIndex = i;
            }
        }
        
        // ÈñæÂÄ§„ÉÅ„Çß„ÉÉ„ÇØ
        if (maxValue < -70) return 0; // -70dB‰ª•‰∏ã„ÅØÁÑ°Ë¶ñ
        
        const nyquist = this.audioContext.sampleRate / 2;
        const frequency = (maxIndex * nyquist) / freqData.length;
        
        return frequency;
    }
    
    frequencyToNote(frequency) {
        // A4 (440Hz) „Åã„Çâ„ÅÆÂçäÈü≥Êï∞„ÇíË®àÁÆó
        const A4 = 440;
        const noteNumber = 12 * Math.log2(frequency / A4);
        const roundedNoteNumber = Math.round(noteNumber);
        
        // „Çª„É≥„Éà (Èü≥Á®ã„ÅÆÁ≤æÂ∫¶„ÄÅ100„Çª„É≥„Éà = 1ÂçäÈü≥)
        const cents = Math.round((noteNumber - roundedNoteNumber) * 100);
        
        // Èü≥Á®ãÂêç„ÇíÂèñÂæó (A4„ÇíÂü∫Ê∫ñ„Å®„Åó„ÅüÁõ∏ÂØæ‰ΩçÁΩÆ)
        const noteIndex = ((roundedNoteNumber % 12) + 12) % 12; // Ê≠£„ÅÆÂÄ§„Å´Ë™øÊï¥
        const octave = Math.floor((roundedNoteNumber + 57) / 12); // A4 = „Ç™„ÇØ„Çø„Éº„Éñ4
        
        // Êó•Êú¨Ë™ûÈü≥Á®ãÂêç + „Ç™„ÇØ„Çø„Éº„Éñ
        const noteName = this.noteNamesJP[noteIndex] + octave;
        
        return {
            name: noteName,
            cents: cents,
            frequency: frequency,
            noteNumber: roundedNoteNumber
        };
    }
    
    updateFrequencyDisplay(frequency) {
        const element = document.getElementById('frequency-main');
        if (element) {
            if (frequency > 0) {
                element.textContent = `${Math.round(frequency)} Hz`;
                element.style.color = '#4CAF50';
                element.style.borderColor = '#4CAF50';
            } else {
                element.textContent = '--- Hz';
                element.style.color = '#999';
                element.style.borderColor = '#e0e0e0';
            }
        }
    }
    
    updateNoteDisplay(noteInfo) {
        const noteElement = document.getElementById('note-display');
        const accuracyElement = document.getElementById('accuracy-display');
        
        if (noteInfo && noteElement && accuracyElement) {
            noteElement.textContent = `Èü≥Á®ã: ${noteInfo.name}`;
            noteElement.style.color = '#667eea';
            
            accuracyElement.textContent = `Á≤æÂ∫¶: ${noteInfo.cents > 0 ? '+' : ''}${noteInfo.cents}¬¢`;
            
            // Á≤æÂ∫¶„Å´„Çà„ÇãËâ≤ÂàÜ„Åë
            if (Math.abs(noteInfo.cents) < 10) {
                accuracyElement.style.color = '#4CAF50'; // Á∑ëÔºöÊ≠£Á¢∫
            } else if (Math.abs(noteInfo.cents) < 30) {
                accuracyElement.style.color = '#FF9800'; // „Ç™„É¨„É≥„Ç∏Ôºö„Åæ„ÅÇ„Åæ„ÅÇ
            } else {
                accuracyElement.style.color = '#f44336'; // Ëµ§Ôºö„Åö„Çå„Å¶„ÅÑ„Çã
            }
        } else if (noteElement && accuracyElement) {
            noteElement.textContent = 'Èü≥Á®ã: ---';
            noteElement.style.color = '#999';
            accuracyElement.textContent = 'Á≤æÂ∫¶: ---';
            accuracyElement.style.color = '#999';
        }
    }
    
    drawWaveform(timeData, volume) {
        const width = this.canvas.width;
        const height = this.canvas.height;
        
        // ËÉåÊôØ„ÇØ„É™„Ç¢
        this.ctx.fillStyle = '#f8f9fa';
        this.ctx.fillRect(0, 0, width, height);
        
        // ‰∏≠Â§ÆÁ∑ö
        this.ctx.strokeStyle = '#e0e0e0';
        this.ctx.lineWidth = 1;
        this.ctx.beginPath();
        this.ctx.moveTo(0, height / 2);
        this.ctx.lineTo(width - 60, height / 2);
        this.ctx.stroke();
        
        // Ê≥¢ÂΩ¢ÊèèÁîª
        const waveformWidth = width - 60;
        this.ctx.lineWidth = 2;
        this.ctx.strokeStyle = volume > 5 ? '#667eea' : '#ffb74d';
        this.ctx.beginPath();
        
        for (let i = 0; i < timeData.length; i += 4) {
            const v = (timeData[i] - 128) / 128.0;
            const x = (i / timeData.length) * waveformWidth;
            const y = (height / 2) + (v * height / 3);
            
            if (i === 0) {
                this.ctx.moveTo(x, y);
            } else {
                this.ctx.lineTo(x, y);
            }
        }
        
        this.ctx.stroke();
        
        // Èü≥Èáè„Éê„ÉºÊèèÁîª
        this.drawVolumeBar(volume, width, height);
    }
    
    drawVolumeBar(volume, width, height) {
        const barWidth = 15;
        const barHeight = height * 0.8;
        const barX = width - 40;
        const barY = height * 0.1;
        
        // ËÉåÊôØ
        this.ctx.fillStyle = '#e0e0e0';
        this.ctx.fillRect(barX, barY, barWidth, barHeight);
        
        // „É¨„Éô„É´
        const levelHeight = Math.min(volume / 100, 1) * barHeight;
        const levelY = barY + barHeight - levelHeight;
        
        if (volume > 80) {
            this.ctx.fillStyle = '#f44336';
        } else if (volume > 20) {
            this.ctx.fillStyle = '#4CAF50';
        } else if (volume > 5) {
            this.ctx.fillStyle = '#FF9800';
        } else {
            this.ctx.fillStyle = '#ccc';
        }
        
        this.ctx.fillRect(barX, levelY, barWidth, levelHeight);
        
        // „Éû„Ç§„ÇØ„Ç¢„Ç§„Ç≥„É≥
        this.ctx.fillStyle = volume > 2 ? '#4CAF50' : '#ccc';
        this.ctx.font = '12px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.fillText('üé§', barX + barWidth/2, barY - 5);
    }
    
    stopCapture() {
        this.log('‚èπÔ∏è Âë®Ê≥¢Êï∞Ê§úÂá∫ÂÅúÊ≠¢‰∏≠...');
        
        this.isRunning = false;
        
        if (this.mediaStream) {
            this.mediaStream.getTracks().forEach(track => {
                track.stop();
                this.log(`üîá „Éà„É©„ÉÉ„ÇØÂÅúÊ≠¢: ${track.kind}`);
            });
            this.mediaStream = null;
        }
        
        if (this.audioContext && this.audioContext.state !== 'closed') {
            this.audioContext.close();
            this.audioContext = null;
        }
        
        this.resetUI();
        this.log('‚úÖ Âë®Ê≥¢Êï∞Ê§úÂá∫ÂÆåÂÖ®ÂÅúÊ≠¢');
    }
    
    resetUI() {
        document.getElementById('start-btn').style.display = 'inline-block';
        document.getElementById('stop-btn').style.display = 'none';
        
        // Ë°®Á§∫„É™„Çª„ÉÉ„Éà
        document.getElementById('frequency-main').textContent = '--- Hz';
        document.getElementById('frequency-main').style.color = '#999';
        document.getElementById('frequency-main').style.borderColor = '#e0e0e0';
        
        document.getElementById('note-display').textContent = 'Èü≥Á®ã: ---';
        document.getElementById('note-display').style.color = '#999';
        
        document.getElementById('accuracy-display').textContent = 'Á≤æÂ∫¶: ---';
        document.getElementById('accuracy-display').style.color = '#999';
        
        this.updateStatus('mic-status', 'Êú™Êé•Á∂ö');
        this.updateStatus('volume-status', '0%');
        this.updateStatus('audio-status', 'Êú™ÂàùÊúüÂåñ');
        this.updateStatus('frame-count', '0');
        
        // Canvas „ÇØ„É™„Ç¢
        this.ctx.fillStyle = '#f8f9fa';
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        this.ctx.fillStyle = '#999';
        this.ctx.font = '16px Arial';
        this.ctx.textAlign = 'center';
        this.ctx.fillText('„Éû„Ç§„ÇØÂÅúÊ≠¢‰∏≠', this.canvas.width/2, this.canvas.height/2);
    }
    
    updateStatus(elementId, value, className = '') {
        const element = document.getElementById(elementId);
        if (element) {
            element.textContent = value;
            element.className = `status-value ${className}`;
        }
    }
    
    log(message) {
        const timestamp = new Date().toLocaleTimeString();
        const logLine = `[${timestamp}] ${message}`;
        console.log(logLine);
    }
}

// ÂàùÊúüÂåñ
document.addEventListener('DOMContentLoaded', () => {
    new FrequencyDisplay();
});